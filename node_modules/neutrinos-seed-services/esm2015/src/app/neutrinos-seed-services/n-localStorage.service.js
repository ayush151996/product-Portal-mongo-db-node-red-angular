import * as tslib_1 from "tslib";
import { NSystemService } from './n-system.service';
import { Injectable } from '@angular/core';
import { NgForage, NgForageCache, NgForageConfig, Driver } from 'ngforage';
import { NUtility } from './n-util.service';
let NLocalStorageService = class NLocalStorageService {
    constructor(ngfConfig, ngf, ngfCache) {
        this.ngfConfig = ngfConfig;
        this.ngf = ngf;
        this.ngfCache = ngfCache;
        this.storageCache = {};
    }
    initStorage() {
        return new Promise((resolve, reject) => {
            if (window['cordova']) {
                this.initNgForage();
            }
            this.ngf.iterate((value, key, iteratonNumber) => {
                this.storageCache[key] = value;
            }).then(result => {
                this.checkDeviceId();
                return resolve('iteration is completed');
            }).catch(error => {
                return reject(error);
            });
        });
    }
    getStorage() {
        return this.storageCache;
    }
    setValue(key, value) {
        if (window['cordova']) {
            this.initNgForage();
        }
        this.storageCache[key] = value;
        return this.ngf.setItem(key, value).then(result => {
            return result;
        }, error => {
            console.log(error);
        });
    }
    getValue(key) {
        if (!this.storageCache[key]) {
            return null;
        }
        try {
            const obj = this.storageCache[key];
            return JSON.parse(obj);
        }
        catch (error) {
            return this.storageCache[key];
        }
    }
    remove(key) {
        delete this.storageCache[key];
        if (window['cordova']) {
            this.initNgForage();
        }
        this.ngf.removeItem(key).then(fulfilled => {
            delete this.ngf[key];
        }).catch(error => {
            console.error('Could not remove', key);
        });
    }
    clear() {
        this.storageCache = {};
        this.ngf.clear();
    }
    pluginCheck() {
        if (window['cordova'] && window['NativeStorage']) {
            this.nativeStorageI = window['NativeStorage'];
            // return true;
        }
        // this.initStorage();
    }
    getItemNs(key) {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.getItem(key, result => {
                    resolve(result);
                }, error => {
                    reject(error);
                });
            }
        });
    }
    setItemNs(key, value) {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.setItem(key, value, result => {
                    resolve(result);
                }, error => {
                    reject(error);
                });
            }
        });
    }
    removeItemNs(key) {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.remove(key, (result) => {
                    resolve(result);
                }, (error) => {
                    reject(error);
                });
            }
        });
    }
    clearNs() {
        return new Promise((resolve, reject) => {
            if (window['cordova'] && window['NativeStorage']) {
                this.nativeStorageI.clear(result => {
                    resolve(result);
                }, error => {
                    reject(error);
                });
            }
        });
    }
    initNgForage() {
        this.ngfConfig.configure({
            name: 'MyApp',
            driver: [
                Driver.WEB_SQL,
            ]
        });
    }
    promiseReflect(promise) {
        return promise.then(resolved => { return { v: resolved, status: 'resolved' }; }, error => { return { e: error, status: 'rejected' }; });
    }
    clearLocalStorage() {
        this.remove('userObj');
        this.remove('accessToken');
        this.remove('refreshToken');
        this.remove('registrationId');
    }
    /**
     * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService
    */
    checkDeviceId() {
        if (NSystemService.getInstance().checkDevice() === 'browser') {
            this._deviceUUID = this.getValue('uuid');
            if (!this._deviceUUID) {
                this._deviceUUID = new NUtility().generateUUID();
                this.setValue('uuid', this._deviceUUID);
            }
        }
        else {
            window['plugins'].uniqueDeviceID.get((uuid) => {
                this._deviceUUID = uuid;
                this.setValue('uuid', this._deviceUUID);
            });
        }
        return this._deviceUUID;
    }
    get deviceUUID() {
        return this._deviceUUID;
    }
};
NLocalStorageService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [NgForageConfig, NgForage, NgForageCache])
], NLocalStorageService);
export { NLocalStorageService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1sb2NhbFN0b3JhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZXV0cmlub3Mtc2VlZC1zZXJ2aWNlcy9uLWxvY2FsU3RvcmFnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUMsUUFBUSxFQUFFLGFBQWEsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUc1QyxJQUFhLG9CQUFvQixHQUFqQyxNQUFhLG9CQUFvQjtJQUsvQixZQUFvQixTQUEwQixFQUFtQixHQUFjLEVBQW1CLFFBQXdCO1FBQXRHLGNBQVMsR0FBVCxTQUFTLENBQWlCO1FBQW1CLFFBQUcsR0FBSCxHQUFHLENBQVc7UUFBbUIsYUFBUSxHQUFSLFFBQVEsQ0FBZ0I7UUFIMUgsaUJBQVksR0FBUSxFQUFFLENBQUM7SUFJdkIsQ0FBQztJQUlELFdBQVc7UUFDVCxPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUNyQixJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7YUFDckI7WUFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsY0FBYyxFQUFFLEVBQUU7Z0JBQzlDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO1lBQ2pDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDZixJ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RSxLQUFLLFNBQVMsRUFBRTtZQUM1RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFFekMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztnQkFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ3pDO1NBQ0Y7YUFBTTtZQUNMLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQzVDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDO2dCQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDMUMsQ0FBQyxDQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztJQUMxQixDQUFDO0NBQ0YsQ0FBQTtBQTVLWSxvQkFBb0I7SUFEaEMsVUFBVSxFQUFFOzZDQU1xQixjQUFjLEVBQXlCLFFBQVEsRUFBOEIsYUFBYTtHQUwvRyxvQkFBb0IsQ0E0S2hDO1NBNUtZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5TeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnLi9uLXN5c3RlbS5zZXJ2aWNlJztcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAqIGFzIGxvY2FsZm9yYWdlIGZyb20gJ2xvY2FsZm9yYWdlJztcbmltcG9ydCB7TmdGb3JhZ2UsIE5nRm9yYWdlQ2FjaGUsIE5nRm9yYWdlQ29uZmlnLCBEcml2ZXJ9IGZyb20gJ25nZm9yYWdlJztcbmltcG9ydCB7IE5VdGlsaXR5IH0gZnJvbSAnLi9uLXV0aWwuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOTG9jYWxTdG9yYWdlU2VydmljZSB7XG5cbiAgc3RvcmFnZUNhY2hlOiBhbnkgPSB7fTtcbiAgcHJpdmF0ZSBfZGV2aWNlVVVJRDtcbiAgcHJpdmF0ZSBuYXRpdmVTdG9yYWdlSTtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBuZ2ZDb25maWc/OiBOZ0ZvcmFnZUNvbmZpZywgcHJpdmF0ZSByZWFkb25seSBuZ2Y/OiBOZ0ZvcmFnZSwgcHJpdmF0ZSByZWFkb25seSBuZ2ZDYWNoZT86IE5nRm9yYWdlQ2FjaGUpIHtcbiAgfVxuXG5cblxuICBpbml0U3RvcmFnZSgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHdpbmRvd1snY29yZG92YSddKSB7XG4gICAgICAgIHRoaXMuaW5pdE5nRm9yYWdlKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm5nZi5pdGVyYXRlKCh2YWx1ZSwga2V5LCBpdGVyYXRvbk51bWJlcikgPT4ge1xuICAgICAgICB0aGlzLnN0b3JhZ2VDYWNoZVtrZXldID0gdmFsdWU7XG4gICAgICB9KS50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIHRoaXMuY2hlY2tEZXZpY2VJZCgpO1xuICAgICAgICByZXR1cm4gcmVzb2x2ZSgnaXRlcmF0aW9uIGlzIGNvbXBsZXRlZCcpXG4gICAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHJldHVybiByZWplY3QoZXJyb3IpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBnZXRTdG9yYWdlKCkge1xuICAgIHJldHVybiB0aGlzLnN0b3JhZ2VDYWNoZTtcbiAgfVxuXG5cbiAgc2V0VmFsdWUoa2V5LCB2YWx1ZSkge1xuICAgIGlmICh3aW5kb3dbJ2NvcmRvdmEnXSkge1xuICAgICAgdGhpcy5pbml0TmdGb3JhZ2UoKTtcbiAgICB9XG4gICAgdGhpcy5zdG9yYWdlQ2FjaGVba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzLm5nZi5zZXRJdGVtKGtleSwgdmFsdWUpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSwgZXJyb3IgPT4ge1xuICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgIH0pO1xuICB9XG5cbiAgZ2V0VmFsdWUoa2V5KTogYW55IHwgUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAoIXRoaXMuc3RvcmFnZUNhY2hlW2tleV0pIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gdHJ5IHtcbiAgICAgIGNvbnN0IG9iaiA9IHRoaXMuc3RvcmFnZUNhY2hlW2tleV1cbiAgICAgIHJldHVybiBKU09OLnBhcnNlKG9iaik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0b3JhZ2VDYWNoZVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZShrZXkpIHtcbiAgICBkZWxldGUgdGhpcy5zdG9yYWdlQ2FjaGVba2V5XTtcbiAgICBpZiAod2luZG93Wydjb3Jkb3ZhJ10pIHtcbiAgICAgIHRoaXMuaW5pdE5nRm9yYWdlKCk7XG4gICAgfVxuICAgIHRoaXMubmdmLnJlbW92ZUl0ZW0oa2V5KS50aGVuKGZ1bGZpbGxlZCA9PiB7XG4gICAgICBkZWxldGUgdGhpcy5uZ2Zba2V5XTtcbiAgICB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDb3VsZCBub3QgcmVtb3ZlJywga2V5KTtcbiAgICB9KTtcbiAgfVxuXG4gIGNsZWFyKCkge1xuICAgIHRoaXMuc3RvcmFnZUNhY2hlID0ge307XG4gICAgdGhpcy5uZ2YuY2xlYXIoKTtcbiAgfVxuXG4gIHByaXZhdGUgcGx1Z2luQ2hlY2soKSB7XG4gICAgaWYgKHdpbmRvd1snY29yZG92YSddICYmIHdpbmRvd1snTmF0aXZlU3RvcmFnZSddKSB7XG4gICAgICB0aGlzLm5hdGl2ZVN0b3JhZ2VJID0gd2luZG93WydOYXRpdmVTdG9yYWdlJ107XG4gICAgICAvLyByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gdGhpcy5pbml0U3RvcmFnZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRJdGVtTnMoa2V5KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICh3aW5kb3dbJ2NvcmRvdmEnXSAmJiB3aW5kb3dbJ05hdGl2ZVN0b3JhZ2UnXSkge1xuICAgICAgICB0aGlzLm5hdGl2ZVN0b3JhZ2VJLmdldEl0ZW0oa2V5LCByZXN1bHQgPT4ge1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgc2V0SXRlbU5zKGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgaWYgKHdpbmRvd1snY29yZG92YSddICYmIHdpbmRvd1snTmF0aXZlU3RvcmFnZSddKSB7XG4gICAgICAgIHRoaXMubmF0aXZlU3RvcmFnZUkuc2V0SXRlbShrZXksIHZhbHVlLCByZXN1bHQgPT4ge1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgcmVtb3ZlSXRlbU5zKGtleSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAod2luZG93Wydjb3Jkb3ZhJ10gJiYgd2luZG93WydOYXRpdmVTdG9yYWdlJ10pIHtcbiAgICAgICAgdGhpcy5uYXRpdmVTdG9yYWdlSS5yZW1vdmUoa2V5LCAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgcHJpdmF0ZSBjbGVhck5zKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAod2luZG93Wydjb3Jkb3ZhJ10gJiYgd2luZG93WydOYXRpdmVTdG9yYWdlJ10pIHtcbiAgICAgICAgdGhpcy5uYXRpdmVTdG9yYWdlSS5jbGVhcihyZXN1bHQgPT4ge1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIHByaXZhdGUgaW5pdE5nRm9yYWdlKCkge1xuICAgIHRoaXMubmdmQ29uZmlnLmNvbmZpZ3VyZSh7XG4gICAgICBuYW1lOiAnTXlBcHAnLFxuICAgICAgZHJpdmVyOiBbXG4gICAgICAgIERyaXZlci5XRUJfU1FMLFxuICAgICAgXVxuICAgIH0pO1xuXG4gIH1cblxuICBwcml2YXRlIHByb21pc2VSZWZsZWN0KHByb21pc2UpIHtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKHJlc29sdmVkID0+IHsgcmV0dXJuIHsgdjogcmVzb2x2ZWQsIHN0YXR1czogJ3Jlc29sdmVkJyB9IH0sIGVycm9yID0+IHsgcmV0dXJuIHsgZTogZXJyb3IsIHN0YXR1czogJ3JlamVjdGVkJyB9IH0pXG4gIH1cblxuICBjbGVhckxvY2FsU3RvcmFnZSgpIHtcbiAgICB0aGlzLnJlbW92ZSgndXNlck9iaicpO1xuICAgIHRoaXMucmVtb3ZlKCdhY2Nlc3NUb2tlbicpO1xuICAgIHRoaXMucmVtb3ZlKCdyZWZyZXNoVG9rZW4nKTtcbiAgICB0aGlzLnJlbW92ZSgncmVnaXN0cmF0aW9uSWQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEdWUgdG8gdGltaW5nIGlzc3VlcyBhbmQgY2lyY3VsYXIgZGVwZW5kZW5jeSBjaGVja0RldmljZUlkIGlzIG1vdmVkIGZyb20gTlN5c3RlbVNlcnZpY2VcbiAgKi9cblxuICBjaGVja0RldmljZUlkKCkge1xuICAgIGlmIChOU3lzdGVtU2VydmljZS5nZXRJbnN0YW5jZSgpLmNoZWNrRGV2aWNlKCkgPT09ICdicm93c2VyJykge1xuICAgICAgdGhpcy5fZGV2aWNlVVVJRCA9IHRoaXMuZ2V0VmFsdWUoJ3V1aWQnKTtcblxuICAgICAgaWYgKCF0aGlzLl9kZXZpY2VVVUlEKSB7XG4gICAgICAgIHRoaXMuX2RldmljZVVVSUQgPSBuZXcgTlV0aWxpdHkoKS5nZW5lcmF0ZVVVSUQoKTtcbiAgICAgICAgdGhpcy5zZXRWYWx1ZSgndXVpZCcsIHRoaXMuX2RldmljZVVVSUQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3dbJ3BsdWdpbnMnXS51bmlxdWVEZXZpY2VJRC5nZXQoKHV1aWQpID0+IHtcbiAgICAgICAgdGhpcy5fZGV2aWNlVVVJRCA9IHV1aWQ7XG4gICAgICAgIHRoaXMuc2V0VmFsdWUoJ3V1aWQnLCB0aGlzLl9kZXZpY2VVVUlEKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fZGV2aWNlVVVJRDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZGV2aWNlVVVJRCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZGV2aWNlVVVJRDtcbiAgfVxufVxuIl19