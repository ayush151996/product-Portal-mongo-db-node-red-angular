import * as tslib_1 from "tslib";
import { map } from 'rxjs/operators';
import { Injectable, EventEmitter, Output } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { NSystemService } from './n-system.service';
import { NTokenService } from './n-token.service';
import { NPubSubService } from './n-pubSub.service';
import { NSessionStorageService } from './n-sessionStorage.service';
import { NLocalStorageService } from './n-localStorage.service';
import { NNotificationService } from './n-notification.service';
let NLoginService = class NLoginService {
    constructor(http, pubSubService, notificationService, nLocalStorageService, nTokenService) {
        this.http = http;
        this.pubSubService = pubSubService;
        this.notificationService = notificationService;
        this.nLocalStorageService = nLocalStorageService;
        this.nTokenService = nTokenService;
        this.loginCompleted = new EventEmitter();
        this.systemService = NSystemService.getInstance();
        // this.nTokenService = new NTokenService();
        this.nSessionStorage = new NSessionStorageService();
        // this.nLocalStorageService = new NLocalStorageService();
    }
    login(userName, password, isRemember) {
        this.appProperties = this.systemService.getVal('properties');
        this.loginUrl = this.systemService.getAuthUrl() + this.appProperties.appName;
        this.uuid = this.nLocalStorageService.getValue('uuid');
        if (!this.uuid) {
            this.uuid = this.nLocalStorageService.checkDeviceId();
        }
        this.details = {
            username: userName,
            password: password,
        };
        this.details.platformDetails = this.systemService.getPlatformDetails(this.systemService.checkDevice());
        this.details.platformDetails['uuid'] = this.uuid;
        return this.http.post(this.loginUrl, JSON.stringify(this.details)).pipe(map(result => {
            const tokensObj = result;
            if (tokensObj) {
                this.nTokenService.updateTokens(tokensObj, isRemember);
            }
            // TODO chris array of supported pushes currently only support APNS and Firebase
            if ((this.systemService.getVal('firebaseSenderId') != 'FIREBASE_SENDER_ID' && this.systemService.getVal('firebaseAuthKey') != 'FIREBASE_AUTH_KEY')
                || (this.systemService.getVal('pushType') === 'APNS' && this.systemService.isIOS())) {
                this.pubSubService.$pub('firebaseRegister');
            }
            this.pubSubService.$pub('loginComplete');
            return (result);
        }, error => {
            return (error);
        }));
    }
    isLoggedIn() {
        return this.nLocalStorageService.initStorage().then(result => {
            if (this.nSessionStorage.getValue('accessToken') && this.nSessionStorage.getValue('refreshToken') &&
                this.nSessionStorage.getValue('accessToken') != 'null' && this.nSessionStorage.getValue('refreshToken') != 'null') {
                return true;
            }
            return false;
        }).catch(error => {
            return false;
        });
    }
};
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], NLoginService.prototype, "loginCompleted", void 0);
NLoginService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [HttpClient, NPubSubService, NNotificationService,
        NLocalStorageService, NTokenService])
], NLoginService);
export { NLoginService };
//# sourceMappingURL=data:application/json;base64,