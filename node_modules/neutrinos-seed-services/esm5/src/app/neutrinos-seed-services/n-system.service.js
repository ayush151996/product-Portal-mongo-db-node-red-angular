import * as platform from 'platform';
// @dynamic
var NSystemService = /** @class */ (function () {
    function NSystemService() {
        this._deviceType = this.checkDevice();
    }
    NSystemService.getInstance = function () {
        if (!this.instance) {
            this.instance = new NSystemService();
        }
        return this.instance;
    };
    /**
     * Seter and getter for the environments
     */
    // set environments(properties) {
    //   console.log(properties);
    //   NSystemService.envProperties = properties;
    //   this.properties = this.getVal('properties');
    // }
    // get environments() {
    //   return NSystemService.envProperties;
    // }
    /**
     * Returna 'mobile' or 'browser' based on the platform
     */
    NSystemService.prototype.checkDevice = function () {
        if (window['device'] && (window['device']['platform'] != 'browser' || window['device']['platform'] != 'Browser')) {
            return 'mobile';
        }
        else if (window['device'] && (window['device']['platform'] == 'browser' || window['device']['platform'] == 'Browser')) {
            return 'cordova_browser';
        }
        else {
            return 'browser';
        }
    };
    Object.defineProperty(NSystemService.prototype, "deviceType", {
        get: function () {
            return this._deviceType;
        },
        enumerable: true,
        configurable: true
    });
    NSystemService.prototype.getVal = function (key) {
        if (!NSystemService.envProperties) {
            NSystemService.envProperties = window['neutrinos']['environments'];
            this.properties = NSystemService.envProperties.properties;
        }
        if (key == 'properties') {
            if (NSystemService.envProperties) {
                return NSystemService.envProperties.properties;
            }
            else {
                return undefined;
            }
        }
        else {
            if (NSystemService.envProperties && NSystemService.envProperties.properties) {
                return NSystemService.envProperties.properties[key];
            }
            else {
                return undefined;
            }
        }
    };
    NSystemService.prototype.isAndroid = function () {
        if (window['device'] && window['device']['platform'] == 'Android') {
            return true;
        }
        else {
            return false;
        }
    };
    NSystemService.prototype.isIOS = function () {
        if (window['device'] && window['device']['platform'] == 'iOS') {
            return true;
        }
        else {
            return false;
        }
    };
    NSystemService.prototype.getAndroidVersion = function () {
        if (this.isAndroid()) {
            return window['device']['version'];
        }
        else {
            return '';
        }
    };
    NSystemService.prototype.getAuthUrl = function () {
        // this.properties = this.getVal('properties');
        return this.properties.baseUrl + this.properties.tenantName + '/auth/';
    };
    NSystemService.prototype.getTenantUrl = function () {
        return this.properties.baseUrl + this.properties.tenantName + '/';
    };
    NSystemService.prototype.getAppUrl = function () {
        return this.properties.baseUrl + this.properties.tenantName + '/proxy/' + this.properties.appName + '/';
    };
    NSystemService.prototype.getProxyUrl = function () {
        return this.properties.baseUrl + this.properties.tenantName + '/proxy/';
    };
    NSystemService.prototype.getDataModelUrl = function () {
        return this.properties.baseUrl + this.properties.tenantName + '/datamodel/' + this.properties.appDataSource + '/' + this.properties.appName + '/';
    };
    NSystemService.prototype.getFileIOUrl = function () {
        return this.properties.baseUrl + this.properties.tenantName + '/fileio/' +
            this.properties.appDataSource + '/' + this.properties.appName + '/';
    };
    NSystemService.prototype.getPlatformDetails = function (type) {
        var pDetails = {
            platform: platform.os.family,
            platformVersion: platform.os.version,
        };
        if (type === 'browser') {
            return Object.assign(pDetails, {
                type: 'browser',
                browser: platform.name,
                browserVersion: platform.version,
            });
        }
        else if (type === 'mobile' || type === 'cordova_browser') {
            return Object.assign(pDetails, {
                type: 'mobile',
                model: window['device'].model,
                manufacturer: window['device'].manufacturer,
                isVirtual: window['device'].isVirtual
            });
        }
    };
    return NSystemService;
}());
export { NSystemService };
//# sourceMappingURL=data:application/json;base64,