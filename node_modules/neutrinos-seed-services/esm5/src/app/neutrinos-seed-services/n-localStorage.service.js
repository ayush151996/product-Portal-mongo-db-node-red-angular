import * as tslib_1 from "tslib";
import { NSystemService } from './n-system.service';
import { Injectable } from '@angular/core';
import { NgForage, NgForageCache, NgForageConfig, Driver } from 'ngforage';
import { NUtility } from './n-util.service';
var NLocalStorageService = /** @class */ (function () {
    function NLocalStorageService(ngfConfig, ngf, ngfCache) {
        this.ngfConfig = ngfConfig;
        this.ngf = ngf;
        this.ngfCache = ngfCache;
        this.storageCache = {};
    }
    NLocalStorageService.prototype.initStorage = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (window['cordova']) {
                _this.initNgForage();
            }
            _this.ngf.iterate(function (value, key, iteratonNumber) {
                _this.storageCache[key] = value;
            }).then(function (result) {
                _this.checkDeviceId();
                return resolve('iteration is completed');
            }).catch(function (error) {
                return reject(error);
            });
        });
    };
    NLocalStorageService.prototype.getStorage = function () {
        return this.storageCache;
    };
    NLocalStorageService.prototype.setValue = function (key, value) {
        if (window['cordova']) {
            this.initNgForage();
        }
        this.storageCache[key] = value;
        return this.ngf.setItem(key, value).then(function (result) {
            return result;
        }, function (error) {
            console.log(error);
        });
    };
    NLocalStorageService.prototype.getValue = function (key) {
        if (!this.storageCache[key]) {
            return null;
        }
        try {
            var obj = this.storageCache[key];
            return JSON.parse(obj);
        }
        catch (error) {
            return this.storageCache[key];
        }
    };
    NLocalStorageService.prototype.remove = function (key) {
        var _this = this;
        delete this.storageCache[key];
        if (window['cordova']) {
            this.initNgForage();
        }
        this.ngf.removeItem(key).then(function (fulfilled) {
            delete _this.ngf[key];
        }).catch(function (error) {
            console.error('Could not remove', key);
        });
    };
    NLocalStorageService.prototype.clear = function () {
        this.storageCache = {};
        this.ngf.clear();
    };
    NLocalStorageService.prototype.pluginCheck = function () {
        if (window['cordova'] && window['NativeStorage']) {
            this.nativeStorageI = window['NativeStorage'];
            // return true;
        }
        // this.initStorage();
    };
    NLocalStorageService.prototype.getItemNs = function (key) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (window['cordova'] && window['NativeStorage']) {
                _this.nativeStorageI.getItem(key, function (result) {
                    resolve(result);
                }, function (error) {
                    reject(error);
                });
            }
        });
    };
    NLocalStorageService.prototype.setItemNs = function (key, value) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (window['cordova'] && window['NativeStorage']) {
                _this.nativeStorageI.setItem(key, value, function (result) {
                    resolve(result);
                }, function (error) {
                    reject(error);
                });
            }
        });
    };
    NLocalStorageService.prototype.removeItemNs = function (key) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (window['cordova'] && window['NativeStorage']) {
                _this.nativeStorageI.remove(key, function (result) {
                    resolve(result);
                }, function (error) {
                    reject(error);
                });
            }
        });
    };
    NLocalStorageService.prototype.clearNs = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (window['cordova'] && window['NativeStorage']) {
                _this.nativeStorageI.clear(function (result) {
                    resolve(result);
                }, function (error) {
                    reject(error);
                });
            }
        });
    };
    NLocalStorageService.prototype.initNgForage = function () {
        this.ngfConfig.configure({
            name: 'MyApp',
            driver: [
                Driver.WEB_SQL,
            ]
        });
    };
    NLocalStorageService.prototype.promiseReflect = function (promise) {
        return promise.then(function (resolved) { return { v: resolved, status: 'resolved' }; }, function (error) { return { e: error, status: 'rejected' }; });
    };
    NLocalStorageService.prototype.clearLocalStorage = function () {
        this.remove('userObj');
        this.remove('accessToken');
        this.remove('refreshToken');
        this.remove('registrationId');
    };
    /**
     * Due to timing issues and circular dependency checkDeviceId is moved from NSystemService
    */
    NLocalStorageService.prototype.checkDeviceId = function () {
        var _this = this;
        if (NSystemService.getInstance().checkDevice() === 'browser') {
            this._deviceUUID = this.getValue('uuid');
            if (!this._deviceUUID) {
                this._deviceUUID = new NUtility().generateUUID();
                this.setValue('uuid', this._deviceUUID);
            }
        }
        else {
            window['plugins'].uniqueDeviceID.get(function (uuid) {
                _this._deviceUUID = uuid;
                _this.setValue('uuid', _this._deviceUUID);
            });
        }
        return this._deviceUUID;
    };
    Object.defineProperty(NLocalStorageService.prototype, "deviceUUID", {
        get: function () {
            return this._deviceUUID;
        },
        enumerable: true,
        configurable: true
    });
    NLocalStorageService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [NgForageConfig, NgForage, NgForageCache])
    ], NLocalStorageService);
    return NLocalStorageService;
}());
export { NLocalStorageService };
//# sourceMappingURL=data:application/json;base64,