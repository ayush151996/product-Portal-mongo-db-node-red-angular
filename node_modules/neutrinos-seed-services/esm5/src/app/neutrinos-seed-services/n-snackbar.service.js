import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
// import { MatSnackBar } from '@angular/material';
import { Subject } from 'rxjs';
import { NSystemService } from './n-system.service';
import { NPubSubService } from './n-pubSub.service';
var NSnackbarService = /** @class */ (function () {
    function NSnackbarService(nPubSubService) {
        var _this = this;
        this.nPubSubService = nPubSubService;
        this.snackService = new Subject();
        if (NSystemService.getInstance().getVal('useDefaultExceptionUI')) {
            this.snackBarListner = this.nPubSubService.$sub('openSnackBar', function (msg) {
                _this.openSnackBar(msg);
            });
        }
    }
    NSnackbarService.prototype.get = function () {
        return this.snackService.asObservable();
    };
    NSnackbarService.prototype.add = function (data) {
        this.snackService.next({
            action: 'add',
            data: data
        });
    };
    NSnackbarService.prototype.remove = function (id) {
        this.snackService.next({ action: 'remove', id: id });
    };
    NSnackbarService.prototype.clear = function () {
        this.snackService.next({ action: 'clear' });
    };
    NSnackbarService.prototype.openSnackBar = function (message, timeout) {
        this.add({
            msg: message,
            timeout: timeout || 5000,
            action: {
                text: 'Close',
                onClick: function (snack) {
                },
            },
            onAdd: function (snack) {
            },
            onRemove: function (snack) {
            }
        });
    };
    NSnackbarService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [NPubSubService])
    ], NSnackbarService);
    return NSnackbarService;
}());
export { NSnackbarService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zbmFja2Jhci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmV1dHJpbm9zLXNlZWQtc2VydmljZXMvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzL24tc25hY2tiYXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxtREFBbUQ7QUFDbkQsT0FBTyxFQUFFLE9BQU8sRUFBYyxNQUFNLE1BQU0sQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSXBEO0lBR0UsMEJBQW9CLGNBQThCO1FBQWxELGlCQU1DO1FBTm1CLG1CQUFjLEdBQWQsY0FBYyxDQUFnQjtRQUQxQyxpQkFBWSxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7UUFFeEMsSUFBSSxjQUFjLENBQUMsV0FBVyxFQUFFLENBQUMsTUFBTSxDQUFDLHVCQUF1QixDQUFDLEVBQUU7WUFDaEUsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsVUFBQyxHQUFHO2dCQUNsRSxLQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFBO1NBQ0g7SUFDSCxDQUFDO0lBRUQsOEJBQUcsR0FBSDtRQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0lBSUQsOEJBQUcsR0FBSCxVQUFJLElBR0g7UUFDQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUNyQixNQUFNLEVBQUUsS0FBSztZQUNiLElBQUksRUFBRSxJQUFJO1NBQ1gsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGlDQUFNLEdBQU4sVUFBTyxFQUFVO1FBQ2YsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxnQ0FBSyxHQUFMO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztJQUM5QyxDQUFDO0lBRUQsdUNBQVksR0FBWixVQUFhLE9BQU8sRUFBRSxPQUFRO1FBQzVCLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDUCxHQUFHLEVBQUUsT0FBTztZQUNaLE9BQU8sRUFBRSxPQUFPLElBQUksSUFBSTtZQUN4QixNQUFNLEVBQUU7Z0JBQ04sSUFBSSxFQUFFLE9BQU87Z0JBQ2IsT0FBTyxFQUFFLFVBQUMsS0FBSztnQkFDZixDQUFDO2FBQ0Y7WUFDRCxLQUFLLEVBQUUsVUFBQyxLQUFLO1lBQ2IsQ0FBQztZQUNELFFBQVEsRUFBRSxVQUFDLEtBQUs7WUFDaEIsQ0FBQztTQUNGLENBQUMsQ0FBQztJQUNMLENBQUM7SUFqRFUsZ0JBQWdCO1FBRDVCLFVBQVUsRUFBRTtpREFJeUIsY0FBYztPQUh2QyxnQkFBZ0IsQ0FtRDVCO0lBQUQsdUJBQUM7Q0FBQSxBQW5ERCxJQW1EQztTQW5EWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4vLyBpbXBvcnQgeyBNYXRTbmFja0JhciB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcbmltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5TeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnLi9uLXN5c3RlbS5zZXJ2aWNlJztcbmltcG9ydCB7IE5QdWJTdWJTZXJ2aWNlIH0gZnJvbSAnLi9uLXB1YlN1Yi5zZXJ2aWNlJztcblxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTlNuYWNrYmFyU2VydmljZSB7XG4gIHNuYWNrQmFyTGlzdG5lcjtcbiAgcHJpdmF0ZSBzbmFja1NlcnZpY2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgblB1YlN1YlNlcnZpY2U6IE5QdWJTdWJTZXJ2aWNlKSB7XG4gICAgaWYgKE5TeXN0ZW1TZXJ2aWNlLmdldEluc3RhbmNlKCkuZ2V0VmFsKCd1c2VEZWZhdWx0RXhjZXB0aW9uVUknKSkge1xuICAgICAgdGhpcy5zbmFja0Jhckxpc3RuZXIgPSB0aGlzLm5QdWJTdWJTZXJ2aWNlLiRzdWIoJ29wZW5TbmFja0JhcicsIChtc2cpID0+IHtcbiAgICAgICAgdGhpcy5vcGVuU25hY2tCYXIobXNnKTtcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLnNuYWNrU2VydmljZS5hc09ic2VydmFibGUoKTtcbiAgfVxuXG5cblxuICBhZGQoZGF0YToge1xuICAgIG1zZzogc3RyaW5nLCB0aW1lb3V0PzogbnVtYmVyLCBiYWNrZ3JvdW5kPzogc3RyaW5nLCBjb2xvcj86IHN0cmluZywgY3VzdG9tQ2xhc3M/OiBhbnksXG4gICAgYWN0aW9uPzogeyB0ZXh0OiBzdHJpbmcsIG9uQ2xpY2s/OiBGdW5jdGlvbiwgY29sb3I/OiBzdHJpbmcgfSwgb25BZGQ/OiBGdW5jdGlvbiwgb25SZW1vdmU/OiBGdW5jdGlvblxuICB9KSB7XG4gICAgdGhpcy5zbmFja1NlcnZpY2UubmV4dCh7XG4gICAgICBhY3Rpb246ICdhZGQnLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pO1xuICB9XG5cbiAgcmVtb3ZlKGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNuYWNrU2VydmljZS5uZXh0KHsgYWN0aW9uOiAncmVtb3ZlJywgaWQ6IGlkIH0pO1xuICB9XG5cbiAgY2xlYXIoKSB7XG4gICAgdGhpcy5zbmFja1NlcnZpY2UubmV4dCh7IGFjdGlvbjogJ2NsZWFyJyB9KTtcbiAgfVxuXG4gIG9wZW5TbmFja0JhcihtZXNzYWdlLCB0aW1lb3V0PywgKSB7XG4gICAgdGhpcy5hZGQoe1xuICAgICAgbXNnOiBtZXNzYWdlLFxuICAgICAgdGltZW91dDogdGltZW91dCB8fCA1MDAwLFxuICAgICAgYWN0aW9uOiB7XG4gICAgICAgIHRleHQ6ICdDbG9zZScsXG4gICAgICAgIG9uQ2xpY2s6IChzbmFjaykgPT4ge1xuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIG9uQWRkOiAoc25hY2spID0+IHtcbiAgICAgIH0sXG4gICAgICBvblJlbW92ZTogKHNuYWNrKSA9PiB7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxufVxuIl19