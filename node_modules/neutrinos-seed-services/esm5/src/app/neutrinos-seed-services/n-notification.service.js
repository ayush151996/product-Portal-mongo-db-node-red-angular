import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NSystemService } from './n-system.service';
import { NLocalStorageService } from './n-localStorage.service';
import * as firebase from 'firebase';
import { NPubSubService } from './n-pubSub.service';
import { HttpClient } from '@angular/common/http';
import { NSessionStorageService } from './n-sessionStorage.service';
// import { Router } from '@angular/router';
import { NHTTPLoaderService } from './n-HTTPLoader.service';
var NNotificationService = /** @class */ (function () {
    function NNotificationService(localStorageService, pubSubService, http, bHttpLoader) {
        var _this = this;
        this.localStorageService = localStorageService;
        this.pubSubService = pubSubService;
        this.http = http;
        this.bHttpLoader = bHttpLoader;
        // private static instance: NNotificationService;
        this.systemService = NSystemService.getInstance();
        this.possiblePushTypes = ['APNS', 'FCM'];
        this.firebaseSenderId = this.systemService.getVal('firebaseSenderId');
        this.isNotificationEnabled = this.systemService.getVal('isNotificationEnabled');
        this.appName = this.systemService.getVal('appName');
        this.deviceType = this.systemService.deviceType;
        this.sessionStorage = new NSessionStorageService();
        this.loginSubscribe = this.pubSubService.$sub('firebaseRegister', function () {
            _this.enableNotification();
        });
    }
    NNotificationService.prototype.ngOnInit = function () {
    };
    NNotificationService.prototype.enableNotification = function () {
        var _this = this;
        var pushType = this.getPushType(this.systemService.getVal('pushType'));
        document.addEventListener('deviceready', function (event) {
            if (_this.isNotificationEnabled) {
                if (_this.deviceType && _this.deviceType != 'browser') {
                    _this.deviceType = _this.systemService.deviceType;
                    _this.checkPermission(pushType).then(function (res) {
                        if (res) {
                            _this.initializeNotifications(pushType);
                        }
                    });
                }
            }
        });
        if (this.isNotificationEnabled && pushType !== 'APNS') {
            if (this.deviceType && this.deviceType == 'browser' && window['Notification']) {
                this.initialiseWebPush();
            }
        }
    };
    NNotificationService.prototype.initialiseWebPush = function () {
        var __this = this;
        var messaging = firebase.messaging();
        Notification.requestPermission()
            .then(function () {
            return messaging.getToken();
        })
            .then(function (token) {
            if (token) {
                __this.sendRegDetails(token);
            }
        })
            .catch(function (err) {
            __this.bHttpLoader.alertError(err);
        });
        messaging.onMessage(function (payload) {
            if (payload['notification']) {
                var notificationObj = payload['notification'];
                var options = {
                    body: notificationObj.body,
                    icon: notificationObj.icon
                };
                // creating a native browser message
                var notificationUI = new Notification(notificationObj.title, options);
                notificationUI.onclick = function () {
                    window.focus(); // window is focused when the user clicks the notification using this
                };
            }
        });
    };
    NNotificationService.prototype.checkPermission = function (pushType) {
        var _this = this;
        // Android & iOS only
        // Checks whether the push notification permission has been granted.
        return new Promise(function (resolve) {
            pushType = _this.getPushType(pushType);
            if ((_this.deviceType === 'Android' || _this.deviceType === 'iOS') && (pushType === 'FCM')) {
                PushNotification.hasPermission(function (data) {
                    return resolve(data.isEnabled);
                });
            }
            else if (_this.deviceType === 'iOS' && pushType === 'APNS') {
                APNSPushNotification.hasPermission(function (data) {
                    return resolve(data.isEnabled);
                });
            }
            else {
                return resolve(true);
            }
        });
    };
    NNotificationService.prototype.initializeNotifications = function (pushType) {
        var _this = this;
        //pushType = pushType ? pushType : 'FCM';
        pushType = this.getPushType(pushType);
        var push;
        // Default if for FCM
        if (pushType === 'FCM') {
            push = window['PushNotification'].init({
                android: {
                    senderID: this.firebaseSenderId
                },
                ios: {
                    alert: "true",
                    badge: "true",
                    sound: "true",
                    senderID: this.firebaseSenderId
                },
            });
        }
        // New APNS plugin init
        else if (pushType === 'APNS') {
            push = window['APNSPushNotification'].init({
                ios: {
                    alert: "true",
                    badge: "true",
                    sound: "true"
                }
            });
        }
        push.on('registration', function (data) {
            // data.registrationId
            _this.sendRegDetails(data.registrationId);
        });
        // ToDo Christy get call back function from app user to change what happens once a notification arrives
        push.on('notification', function (data) {
            window['cordova'].plugins.notification.local.schedule({
                title: data.title,
                text: data.message,
                sound: data.sound,
                at: new Date().getTime()
            });
        });
        push.on('error', function (e) {
            // e.message
            console.error(e);
        });
    };
    NNotificationService.prototype.sendRegDetails = function (registrationId) {
        this.localStorageService.setValue('registrationId', registrationId);
        var url = this.systemService.getTenantUrl() + 'notification/' + this.systemService.getVal('appName') + '/register';
        var pushType = this.getPushType(this.systemService.getVal('pushType'));
        this.http.post(url, {
            'key': this.sessionStorage.getValue('userObj')['userKey'],
            'uuid': this.localStorageService.getValue('uuid'),
            'fbregid': registrationId,
            'pushType': pushType
        }).subscribe(function (result) {
            // this.pubSubService.$pub('FBRegComp');
        }, function (error) {
            console.log(error);
        });
    };
    NNotificationService.prototype.getPushType = function (currPushType) {
        var isValidPush = typeof currPushType !== 'undefined' && this.possiblePushTypes.includes(currPushType.toUpperCase());
        var pushType = isValidPush ? currPushType.toUpperCase() : 'FCM';
        return pushType;
    };
    NNotificationService.prototype.ngOnDestroy = function () {
        this.loginSubscribe.unSubscribe();
    };
    NNotificationService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [NLocalStorageService, NPubSubService,
            HttpClient, NHTTPLoaderService])
    ], NNotificationService);
    return NNotificationService;
}());
export { NNotificationService };
//# sourceMappingURL=data:application/json;base64,