import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
// import { SystemService } from 'app/service/system.service';
import { NSystemService } from 'neutrinos-seed-services';
let NFileIOService = class NFileIOService {
    constructor(http) {
        this.http = http;
        this.checkFileExist = (path, fileName, i, callback) => {
            return window.resolveLocalFileSystemURL(path + fileName, () => {
                let length = 4;
                if (fileName.lastIndexOf('(') > -1) {
                    const isExist = parseInt(fileName.slice((fileName.lastIndexOf('(') + 1), fileName.lastIndexOf(')')), 10);
                    if (!isNaN(isExist)) {
                        i = isExist + 1;
                        if (i > 10 && i < 100) {
                            length += 1;
                        }
                        else if (i > 100) {
                            length += 2;
                        }
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.') - length)) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                    }
                    else {
                        i += 1;
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + fileName.slice(fileName.lastIndexOf('.'));
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                    }
                }
                else {
                    i += 1;
                    fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + fileName.slice(fileName.lastIndexOf('.'));
                    fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                }
                return this.checkFileExist(path, fileName, i, callback);
            }, () => {
                return callback(fileName);
            });
        };
        this.systemService = NSystemService.getInstance();
        this.appProperties = this.systemService.getVal('properties');
    }
    getFileInfo(options) {
        let dataModelURL = this.systemService.getDataModelUrl();
        if (options.metadata) {
            dataModelURL += `${this.appProperties.appName}_${options.entityName}.files?filter={"metadata.key": "${options.metadata.key}"}`;
        }
        else {
            dataModelURL += `${this.appProperties.appName}_${options.entityName}.files/${options.fileId}`;
        }
        return this.http.get(dataModelURL);
    }
    getFormData(fileUri) {
        return new Promise((resolve, reject) => {
            window.resolveLocalFileSystemURL(fileUri, (fileEntry) => {
                fileEntry.file((file) => {
                    const reader = new FileReader();
                    reader.onerror = evt => {
                        return reject(evt);
                    };
                    reader.onloadend = evt => {
                        const formData = new FormData();
                        const blob = new Blob([new Uint8Array(reader.result)], { type: file.type });
                        formData.append('file', blob, file.name);
                        return resolve(formData);
                    };
                    reader.readAsArrayBuffer(file);
                });
            }, (error) => {
                return reject(error);
            });
        });
    }
    getPicture(cameraOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                navigator.camera.getPicture((imageUri) => {
                    this.getFormData(imageUri).then(res => {
                        return resolve(res);
                    }).catch(err => reject(err));
                }, (error) => {
                    return reject(error);
                }, cameraOptions);
            }, false);
        });
    }
    scanPicture(scanOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (scanOptions.hasOwnProperty('sourceType') && scanOptions.hasOwnProperty('doUpload')) {
                    scan.scanDoc(scanOptions.sourceType, (imageUri) => {
                        if (scanOptions.doUpload) {
                            this.getFormData(imageUri).then(res => {
                                return resolve(res);
                            }).catch(err => reject(err));
                        }
                        else {
                            resolve(imageUri);
                        }
                    }, (error) => {
                        return reject(error);
                    });
                }
                else {
                    reject('sourceType not found');
                }
            }, false);
        });
    }
    //Barcode
    getBarcode(barcodeOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                cordova.plugins.barcodeScanner.scan((result) => {
                    if (result.cancelled) {
                        return reject(result);
                    }
                    else {
                        return resolve(result);
                    }
                }, (error) => {
                    return reject(error);
                }, barcodeOptions);
            }, false);
        });
    }
    //Video
    getVideo(videoOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                navigator.device.capture.captureVideo((mediaFiles) => {
                    var imageUri = mediaFiles[0].fullPath;
                    this.getFormData(imageUri).then(res => {
                        return resolve(res);
                    }).catch(err => reject(err));
                }, (error) => {
                    return reject(error);
                }, {});
            }, false);
        });
    }
    //tts
    getTts(ttsOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (ttsOptions.hasOwnProperty('text')) {
                    TTS.speak(ttsOptions).then(() => {
                        return resolve('success');
                    }, (reason) => {
                        return reject(reason);
                    });
                }
                else {
                    reject('text not found');
                }
            }, false);
        });
    }
    //shake
    getShake(shakeOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (shakeOptions.hasOwnProperty('start') && shakeOptions.hasOwnProperty('sensitivity')) {
                    if (shakeOptions.start) {
                        shake.startWatch(() => {
                            return resolve('success');
                        }, shakeOptions.sensitivity, () => {
                            return reject('error');
                        });
                    }
                    else {
                        shake.stopWatch();
                    }
                }
                else {
                    reject('start or sensitivity not found');
                }
            }, false);
        });
    }
    //ocr
    getOcr(ocrOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (ocrOptions.hasOwnProperty('uriOrBase') && ocrOptions.hasOwnProperty('returnType')) {
                    navigator.camera.getPicture((imageData) => {
                        textocr.recText(ocrOptions.uriOrBase, ocrOptions.returnType, imageData, (recognizedText) => {
                            return resolve(recognizedText);
                        }, (message) => {
                            return reject(message);
                        });
                    }, (message) => {
                        return reject(message);
                    }, ocrOptions);
                }
                else {
                    reject('uriOrBase or returnType not found');
                }
            }, false);
        });
    }
    //fingerprint
    getFingerprint(fingerprintOptions) {
        return new Promise((resolve, reject) => {
            document.addEventListener('deviceready', () => {
                if (fingerprintOptions.hasOwnProperty('clientId') && fingerprintOptions.hasOwnProperty('clientSecret')) {
                    Fingerprint.isAvailable((result) => {
                        Fingerprint.show(fingerprintOptions, () => {
                            return resolve('success');
                        }, (err) => {
                            return reject(err);
                        });
                    }, (message) => {
                        return reject(message);
                    });
                }
                else {
                    reject('clientId or clientSecret not found');
                }
            }, false);
        });
    }
    upload(options) {
        return new Promise((resolve, reject) => {
            let body = new FormData();
            if (options.formData) {
                body = options.formData;
            }
            else if (options.files) {
                body.append('file', options.files);
            }
            else {
                reject('No file selected!');
            }
            if (options.metadata) {
                body.append('metadata', JSON.stringify(options.metadata));
            }
            const headers = { 'Content-Type': 'no-content' };
            const url = this.systemService.getFileIOUrl() + `${options.entityName}`;
            let temp_headers = { headers: this.setHeaders(headers) };
            this.http.post(url, body, temp_headers)
                .subscribe(res => resolve(res), err => reject(err));
        });
    }
    download(options) {
        return new Promise((resolve, reject) => {
            if (options.entityName && (options.metadata || options.fileId)) {
                this.getFileInfo(options).subscribe((res) => {
                    if (options.metadata) {
                        res = res[res.length - 1];
                    }
                    else {
                        res = res.result;
                    }
                    const fileInfo = {
                        contentType: '',
                        filename: ''
                    };
                    if (res && res['contentType'] && res['filename']) {
                        fileInfo['contentType'] = res['contentType'];
                        fileInfo['filename'] = res['filename'];
                        let fileIOURL = this.systemService.getFileIOUrl();
                        if (options.metadata) {
                            fileIOURL += `${options.entityName}?metadataFilter={"metadata.key": "${options.metadata.key}"}`;
                        }
                        else {
                            fileIOURL += `${options.entityName}/${options.fileId}`;
                        }
                        const headers = {
                            'Accept': fileInfo.contentType
                        };
                        this.http.get(fileIOURL, { headers: this.setHeaders(headers), responseType: 'blob' }).subscribe((response) => {
                            const blob = new Blob([response.body], { type: fileInfo.contentType });
                            this.saveFile(blob, fileInfo.filename).then((resp) => {
                            }).catch(err => reject(err));
                        }, err => reject(err));
                    }
                    else {
                        reject('fileInfo not exit');
                    }
                }, err => reject(err));
            }
            else {
                return reject('download options not found');
            }
        });
    }
    saveFile(data, filename) {
        return new Promise((resolve, reject) => {
            if (this.systemService.checkDevice() == 'mobile') {
                const storageLocation = this.systemService.isAndroid() ? cordova.file.externalRootDirectory : cordova.file.documentsDirectory;
                this.createDirectory(storageLocation, this.appProperties.appName, filename, data)
                    .then(res => resolve(res))
                    .catch(err => reject(err));
            }
            else {
                this.saveToBrowser(data, filename).then(res => resolve(res));
            }
        });
    }
    saveToBrowser(data, fileName) {
        return new Promise((resolve) => {
            // Edge 20+
            const isEdge = !( /*@cc_on!@*/false || !!document['documentMode']) && !!window.StyleMedia;
            if (isEdge) {
                window.navigator.msSaveBlob(data, fileName);
            }
            else {
                const downloadURL = window.URL.createObjectURL(data);
                const anchor = document.createElement('a');
                document.body.appendChild(anchor);
                anchor.style.display = 'none';
                anchor.download = fileName;
                anchor.href = downloadURL;
                anchor.click();
                window.URL.revokeObjectURL(downloadURL);
                document.body.removeChild(anchor);
                anchor.remove();
            }
            return resolve('download complete');
        });
    }
    createDirectory(rootDirectory, appName, fileName, data) {
        return new Promise((resolve, reject) => {
            window.resolveLocalFileSystemURL(rootDirectory, (fileSystem) => {
                fileSystem.getDirectory(appName, { create: true }, (dirEntry) => {
                    this.checkFileExist(dirEntry.nativeURL, fileName, 0, (newFileName) => {
                        dirEntry.getFile(newFileName, { create: true }, (targetFile) => {
                            targetFile.createWriter((fileWriter) => {
                                fileWriter.onwriteend = () => {
                                    return resolve(targetFile.toURL());
                                };
                                fileWriter.onerror = (err) => {
                                    return reject(err);
                                };
                                fileWriter.write(data);
                            });
                        });
                    });
                }, err => reject(err));
            }, err => reject(err));
        });
    }
    setHeaders(headerJSON) {
        let headers = new HttpHeaders();
        for (const key in headerJSON) {
            if (key) {
                headers = headers.set(key, headerJSON[key]);
            }
        }
        return headers;
    }
};
NFileIOService = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [HttpClient])
], NFileIOService);
export { NFileIOService };
//# sourceMappingURL=data:application/json;base64,