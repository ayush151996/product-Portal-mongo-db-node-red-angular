import * as tslib_1 from "tslib";
import { Directive, Input, Output, EventEmitter } from '@angular/core';
import { HostListener } from '@angular/core';
// import { FileIOService } from '../services/filesystem.service';
import { NFileIOService } from '../services/n-fileIO.service';
import { NDirectiveOptions } from './directive.class';
let NScanDirective = class NScanDirective {
    constructor(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    methodToHandleMouseClickAction() {
        this.getPicture()
            .then((sucess) => this.onsuccess.emit(sucess))
            .catch((error) => this.onerror.emit(error));
    }
    getPicture() {
        return new Promise((resolve, reject) => {
            this.fsv.scanPicture(this.scanOptions).then(res => {
                if (this.scanOptions.doUpload) {
                    const options = {
                        'formData': res,
                        'entityName': this.scanOptions.entityName,
                        'metadata': this.scanOptions.metadata
                    };
                    this.fsv.upload(options).then(uri => {
                        resolve(uri);
                    }).catch(err => reject(err));
                }
                else {
                    resolve(res);
                }
            }).catch((err) => {
                return reject(err);
            });
        });
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", NDirectiveOptions)
], NScanDirective.prototype, "scanOptions", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], NScanDirective.prototype, "onsuccess", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], NScanDirective.prototype, "onerror", void 0);
tslib_1.__decorate([
    HostListener('click'),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", []),
    tslib_1.__metadata("design:returntype", void 0)
], NScanDirective.prototype, "methodToHandleMouseClickAction", null);
NScanDirective = tslib_1.__decorate([
    Directive({
        selector: '[n-scan]'
    }),
    tslib_1.__metadata("design:paramtypes", [NFileIOService])
], NScanDirective);
export { NScanDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1zY2FubmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1tb2R1bGUvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1tb2R1bGUvbmV1dHJpbm9zLWZpbGUvZGlyZWN0aXZlcy9uLXNjYW5uZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0Msa0VBQWtFO0FBQ2xFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUt0RCxJQUFhLGNBQWMsR0FBM0IsTUFBYSxjQUFjO0lBS3pCLFlBQW9CLEdBQW1CO1FBQW5CLFFBQUcsR0FBSCxHQUFHLENBQWdCO1FBSDdCLGNBQVMsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNsRCxZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7SUFFZixDQUFDO0lBRXJCLDhCQUE4QjtRQUNuRCxJQUFJLENBQUMsVUFBVSxFQUFFO2FBQ2QsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUM3QyxLQUFLLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVELFVBQVU7UUFDUixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBRWhELElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUU7b0JBQzdCLE1BQU0sT0FBTyxHQUFHO3dCQUNkLFVBQVUsRUFBRSxHQUFHO3dCQUNmLFlBQVksRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVU7d0JBQ3pDLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVE7cUJBQ3RDLENBQUM7b0JBQ0YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO3dCQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBQ2YsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7aUJBQzlCO3FCQUVEO29CQUNFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDZDtZQUNILENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUNmLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0NBQ0YsQ0FBQTtBQW5DVTtJQUFSLEtBQUssRUFBRTtzQ0FBYyxpQkFBaUI7bURBQUM7QUFDOUI7SUFBVCxNQUFNLEVBQUU7c0NBQVksWUFBWTtpREFBMkI7QUFDbEQ7SUFBVCxNQUFNLEVBQUU7c0NBQVUsWUFBWTsrQ0FBMkI7QUFJbkM7SUFBdEIsWUFBWSxDQUFDLE9BQU8sQ0FBQzs7OztvRUFJckI7QUFYVSxjQUFjO0lBSDFCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxVQUFVO0tBQ3JCLENBQUM7NkNBTXlCLGNBQWM7R0FMNUIsY0FBYyxDQW9DMUI7U0FwQ1ksY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIb3N0TGlzdGVuZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbi8vIGltcG9ydCB7IEZpbGVJT1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9maWxlc3lzdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgTkZpbGVJT1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9uLWZpbGVJTy5zZXJ2aWNlJztcbmltcG9ydCB7IE5EaXJlY3RpdmVPcHRpb25zIH0gZnJvbSAnLi9kaXJlY3RpdmUuY2xhc3MnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbi1zY2FuXSdcbn0pXG5leHBvcnQgY2xhc3MgTlNjYW5EaXJlY3RpdmUge1xuICBASW5wdXQoKSBzY2FuT3B0aW9uczogTkRpcmVjdGl2ZU9wdGlvbnM7XG4gIEBPdXRwdXQoKSBvbnN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgb25lcnJvcjogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmc3Y6IE5GaWxlSU9TZXJ2aWNlKSB7IH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpIG1ldGhvZFRvSGFuZGxlTW91c2VDbGlja0FjdGlvbigpIHtcbiAgICB0aGlzLmdldFBpY3R1cmUoKVxuICAgICAgLnRoZW4oKHN1Y2VzcykgPT4gdGhpcy5vbnN1Y2Nlc3MuZW1pdChzdWNlc3MpKVxuICAgICAgLmNhdGNoKChlcnJvcikgPT4gdGhpcy5vbmVycm9yLmVtaXQoZXJyb3IpKTtcbiAgfVxuXG4gIGdldFBpY3R1cmUoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5mc3Yuc2NhblBpY3R1cmUodGhpcy5zY2FuT3B0aW9ucykudGhlbihyZXMgPT4ge1xuXG4gICAgICAgIGlmICh0aGlzLnNjYW5PcHRpb25zLmRvVXBsb2FkKSB7XG4gICAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICdmb3JtRGF0YSc6IHJlcyxcbiAgICAgICAgICAgICdlbnRpdHlOYW1lJzogdGhpcy5zY2FuT3B0aW9ucy5lbnRpdHlOYW1lLFxuICAgICAgICAgICAgJ21ldGFkYXRhJzogdGhpcy5zY2FuT3B0aW9ucy5tZXRhZGF0YVxuICAgICAgICAgIH07XG4gICAgICAgICAgdGhpcy5mc3YudXBsb2FkKG9wdGlvbnMpLnRoZW4odXJpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUodXJpKTtcbiAgICAgICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAge1xuICAgICAgICAgIHJlc29sdmUocmVzKTtcbiAgICAgICAgfVxuICAgICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuIl19