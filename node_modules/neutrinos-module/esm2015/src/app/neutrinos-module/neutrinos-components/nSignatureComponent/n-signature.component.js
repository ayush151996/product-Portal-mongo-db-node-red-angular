import * as tslib_1 from "tslib";
/*DEFAULT GENERATED TEMPLATE. DO NOT CHANGE SELECTOR TEMPLATE_URL AND CLASS NAME*/
import { Component, ViewChild, Input, Output, EventEmitter } from '@angular/core';
import * as signing from 'signature_pad';
// import { MatSnackBar } from '@angular/material';
/**
* Model import Example :
* import { HERO } from '../models/hero.model';
*/
/**
 * Service import Example :
 * import { HeroService } from '../services/hero/hero.service';
 */
let NSignatureComponent = class NSignatureComponent {
    // import { MatSnackBar } from '@angular/material';
    /**
    * Model import Example :
    * import { HERO } from '../models/hero.model';
    */
    /**
     * Service import Example :
     * import { HeroService } from '../services/hero/hero.service';
     */
    constructor() {
        this.imageDataValue = '';
        this.signaturePad = '';
        this.mode = 'responsive'; // 'click-fullscreen' or 'responsive'
        this.canvasMode = 'responsive'; // 'responsive' or 'fullscreen'
        this.imageDataChange = new EventEmitter();
    }
    get imageData() {
        return this.imageDataValue;
    }
    set imageData(val) {
        this.imageDataValue = val;
        if (val || val === '' || this.isDataURL(val)) {
            this.saveCavas(val);
        }
        this.imageDataChange.emit(this.imageDataValue);
    }
    ngAfterViewInit() {
        if (this.mode === 'responsive') {
            this.createCanvas();
        }
    }
    createCanvas() {
        this.fitToContainer(this.signaturecanvas.nativeElement);
        this.signaturePad = new signing.default(this.signaturecanvas.nativeElement, this.assignOptions());
    }
    saveCavas(dataUrl) {
        if (this.signaturePad) {
            if (this.signaturePad.isEmpty() || dataUrl === '') {
                this.savedData = '';
                this.signaturePad.clear();
            }
            else if (this.isDataURL(dataUrl)) {
                this.signaturePad.fromDataURL(dataUrl);
                this.savedData = this.signaturePad.toData();
            }
            else {
                this.imageData = this.signaturePad.toDataURL();
                if (this.mode === 'click-fullscreen') {
                    this.savedData = this.signaturePad.toData();
                    this.hideCanvas();
                }
            }
        }
    }
    clearCanvas() {
        this.signaturePad.clear();
        // this.fitToContainer(this.signaturecanvas.nativeElement);
    }
    undoCanvas() {
        const data = this.signaturePad.toData();
        if (data) {
            data.pop(); // remove the last dot or line
            this.signaturePad.fromData(data);
        }
    }
    showCanvas() {
        this.classAbs = true;
        this.canvasMode = 'fullscreen';
        if (!this.signaturePad) {
            this.createCanvas();
        }
        this.fitToContainer(this.signaturecanvas.nativeElement, document.body.clientHeight, document.body.clientWidth);
        this.clearCanvas();
        this.createCanvasFromData();
    }
    hideCanvas() {
        this.canvasMode = 'responsive';
    }
    // cancel currently drawn
    cancel() {
        this.savedData = Object.assign([], this.previousSavedData);
    }
    createCanvasFromData() {
        if (this.savedData) {
            this.previousSavedData = Object.assign({}, this.savedData);
            this.signaturePad.fromData(this.savedData);
        }
    }
    fitToContainer(element, height, width) {
        element.style.width = '100%';
        element.style.height = 'calc(100% - 56px)';
        if (height && width) {
            element.width = width;
            element.height = height - 56;
        }
        else {
            element.width = element.offsetWidth;
            element.height = element.offsetHeight;
        }
    }
    assignOptions() {
        let options = {};
        options['backgroundColor'] = this.checkIfValidValueAndRGB(this.backgroundColor, 'backgroundColor');
        options['dotSize'] = this.checkIfValidValueAndNumber(this.dotSize, 'dotSize');
        options['minWidth'] = this.checkIfValidValueAndNumber(this.minWidth, 'minWidth');
        options['maxWidth'] = this.checkIfValidValueAndNumber(this.maxWidth, 'maxWidth');
        options['throttle'] = this.checkIfValidValueAndNumber(this.throttle, 'throttle');
        options['minDistance'] = this.checkIfValidValueAndNumber(this.minDistance, 'minDistance');
        options['penColor'] = this.checkIfValidValueAndRGB(this.penColor, 'penColor');
        options['velocityFilterWeight'] = this.checkIfValidValueAndNumber(this.velocityFilterWeight, 'velocityFilterWeight');
        options = JSON.parse(JSON.stringify(options)); // removing all undefined fields
        options['onBegin'] = this.checkIfValidValueAndFunction(this.onBegin, 'onBegin');
        options['onEnd'] = this.checkIfValidValueAndFunction(this.onEnd, 'onEnd');
        return options;
    }
    checkIfValidValueAndNumber(num, name) {
        if (this.checkIfValid(num) && this.checkNumber(num)) {
            return num;
        }
        this.invalidToast(name, 'num');
        return undefined;
    }
    checkIfValidValueAndRGB(color, name) {
        if (this.checkIfValid(color) && this.checkRGB(color)) {
            return color;
        }
        this.invalidToast(name, 'rgb');
        return undefined;
    }
    checkIfValidValueAndFunction(fn, name) {
        if (this.checkIfValid(fn) && this.checkIfValidFunction(fn)) {
            return fn;
        }
        this.invalidToast(name, 'function format');
        return undefined;
    }
    checkIfValid(value) {
        return (value !== undefined && value !== null) ? value : undefined;
    }
    checkNumber(num) {
        return !this.checkIsNan(Number(num)) ? Number(num) : undefined;
    }
    checkIfValidFunction(fn) {
        return typeof fn === 'function' ? fn : undefined;
    }
    checkRGB(color) {
        const matchColors1 = new RegExp(/rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/);
        const matchColors2 = new RegExp(/rgb\((\d{1,3}),[ \t]+(\d{1,3}),(\d{1,3})\)/);
        const matchColors3 = new RegExp(/rgb\((\d{1,3}),(\d{1,3}),[ \t]+(\d{1,3})\)/);
        return matchColors1.test(color) || matchColors2.test(color) || matchColors3.test(color);
    }
    checkIsNan(value) {
        return Number.isNaN(value);
    }
    invalidToast(optionName, optionType) {
        switch (optionType) {
            case 'num':
                // this.snackbar.open(`Invalid ${optionName} (number or float) given, taking default value instead.`, 'OK');
                break;
            case 'rgb':
                // this.snackbar.open(`Invalid ${optionName} format Eg: rgb(255, 255, 255)  given, taking default value instead.`, 'OK');
                break;
        }
        return;
    }
    isDataURL(s) {
        if (s) {
            const regex = /^\s*data:([a-z]+\/[a-z]+(;[a-z\-]+\=[a-z\-]+)?)?(;base64)?,[a-z0-9\!\$\&\'\,\(\)\*\+\,\;\=\-\.\_\~\:\@\/\?\%\s]*\s*$/i;
            return !!s.match(regex);
        }
        else {
            return false;
        }
    }
};
tslib_1.__decorate([
    ViewChild('signaturecanvas', { static: false }),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "signaturecanvas", void 0);
tslib_1.__decorate([
    ViewChild('canvasparent', { static: false }),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "canvasparent", void 0);
tslib_1.__decorate([
    Input('backgroundColor'),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "backgroundColor", void 0);
tslib_1.__decorate([
    Input('dotSize'),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "dotSize", void 0);
tslib_1.__decorate([
    Input('minWidth'),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "minWidth", void 0);
tslib_1.__decorate([
    Input('maxWidth'),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "maxWidth", void 0);
tslib_1.__decorate([
    Input('throttle'),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "throttle", void 0);
tslib_1.__decorate([
    Input('minDistance'),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "minDistance", void 0);
tslib_1.__decorate([
    Input('penColor'),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "penColor", void 0);
tslib_1.__decorate([
    Input('velocityFilterWeight'),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "velocityFilterWeight", void 0);
tslib_1.__decorate([
    Input('onBegin'),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "onBegin", void 0);
tslib_1.__decorate([
    Input('onEnd'),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "onEnd", void 0);
tslib_1.__decorate([
    Input('mode'),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "mode", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], NSignatureComponent.prototype, "imageDataChange", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object),
    tslib_1.__metadata("design:paramtypes", [Object])
], NSignatureComponent.prototype, "imageData", null);
NSignatureComponent = tslib_1.__decorate([
    Component({
        selector: 'n-signature',
        template: "<div fxFill fxLayout=\"row\" *ngIf=\"mode == 'click-fullscreen' && canvasMode !== 'fullscreen'\" class=\"signature-component-border\">\n    <div fxFlex=\"calc(100%-56px)\" fxLayout=\"column\">\n        <img *ngIf=\"imageDataValue\" [src]=\"imageDataValue\" fxFill/>\n    </div>\n    <div fxFlex=\"56px\" fxLayoutAlign=\" center\" class=\"signature-component-border\">\n        <button mat-icon-button (click)=\"showCanvas()\">\n            <mat-icon>mode_edit</mat-icon>\n        </button>\n    </div>\n</div>\n<div fxFill fxLayout=\"column\" class=\"signature-component-border\" [fxShow]=\"(mode == 'click-fullscreen' && canvasMode == 'fullscreen') || mode == 'responsive'\" [ngClass]=\"{'signature-canvas-fullscreen': classAbs}\">\n    <canvas #signaturecanvas></canvas>\n    <div fxFlex=\"56px\" fxLayoutAlign=\"center center\" class=\"signature-component-border\">\n        <button mat-icon-button (click)=\"undoCanvas()\">\n            <mat-icon>undo</mat-icon>\n        </button>\n        <button mat-icon-button (click)=\"clearCanvas()\">\n            <mat-icon>loop</mat-icon>\n        </button>\n        <button mat-icon-button (click)=\"saveCavas()\">\n            <mat-icon>save</mat-icon>\n        </button>\n        <button mat-icon-button (click)=\"canvasMode = 'responsive'; cancel()\">\n            <mat-icon>clear</mat-icon>\n        </button>\n    </div>\n</div>",
        styles: [`
     :host { height: 100% !important; }
     .signature-canvas-fullscreen {
         position: absolute;
         top: 0;
         bottom: 0;
         right: 0;
         left: 0;
     }
     .signature-component-border {
         border: 2px solid black;
     }
    `]
    })
], NSignatureComponent);
export { NSignatureComponent };
//# sourceMappingURL=data:application/json;base64,