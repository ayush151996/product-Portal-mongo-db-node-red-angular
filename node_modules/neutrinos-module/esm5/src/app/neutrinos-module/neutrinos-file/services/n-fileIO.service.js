import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
// import { SystemService } from 'app/service/system.service';
import { NSystemService } from 'neutrinos-seed-services';
var NFileIOService = /** @class */ (function () {
    function NFileIOService(http) {
        var _this = this;
        this.http = http;
        this.checkFileExist = function (path, fileName, i, callback) {
            return window.resolveLocalFileSystemURL(path + fileName, function () {
                var length = 4;
                if (fileName.lastIndexOf('(') > -1) {
                    var isExist = parseInt(fileName.slice((fileName.lastIndexOf('(') + 1), fileName.lastIndexOf(')')), 10);
                    if (!isNaN(isExist)) {
                        i = isExist + 1;
                        if (i > 10 && i < 100) {
                            length += 1;
                        }
                        else if (i > 100) {
                            length += 2;
                        }
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.') - length)) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                    }
                    else {
                        i += 1;
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + fileName.slice(fileName.lastIndexOf('.'));
                        fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                    }
                }
                else {
                    i += 1;
                    fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + fileName.slice(fileName.lastIndexOf('.'));
                    fileName = fileName.slice(0, (fileName.lastIndexOf('.'))) + ' (' + i + ')' + fileName.slice(fileName.lastIndexOf('.'));
                }
                return _this.checkFileExist(path, fileName, i, callback);
            }, function () {
                return callback(fileName);
            });
        };
        this.systemService = NSystemService.getInstance();
        this.appProperties = this.systemService.getVal('properties');
    }
    NFileIOService.prototype.getFileInfo = function (options) {
        var dataModelURL = this.systemService.getDataModelUrl();
        if (options.metadata) {
            dataModelURL += this.appProperties.appName + "_" + options.entityName + ".files?filter={\"metadata.key\": \"" + options.metadata.key + "\"}";
        }
        else {
            dataModelURL += this.appProperties.appName + "_" + options.entityName + ".files/" + options.fileId;
        }
        return this.http.get(dataModelURL);
    };
    NFileIOService.prototype.getFormData = function (fileUri) {
        return new Promise(function (resolve, reject) {
            window.resolveLocalFileSystemURL(fileUri, function (fileEntry) {
                fileEntry.file(function (file) {
                    var reader = new FileReader();
                    reader.onerror = function (evt) {
                        return reject(evt);
                    };
                    reader.onloadend = function (evt) {
                        var formData = new FormData();
                        var blob = new Blob([new Uint8Array(reader.result)], { type: file.type });
                        formData.append('file', blob, file.name);
                        return resolve(formData);
                    };
                    reader.readAsArrayBuffer(file);
                });
            }, function (error) {
                return reject(error);
            });
        });
    };
    NFileIOService.prototype.getPicture = function (cameraOptions) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                navigator.camera.getPicture(function (imageUri) {
                    _this.getFormData(imageUri).then(function (res) {
                        return resolve(res);
                    }).catch(function (err) { return reject(err); });
                }, function (error) {
                    return reject(error);
                }, cameraOptions);
            }, false);
        });
    };
    NFileIOService.prototype.scanPicture = function (scanOptions) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                if (scanOptions.hasOwnProperty('sourceType') && scanOptions.hasOwnProperty('doUpload')) {
                    scan.scanDoc(scanOptions.sourceType, function (imageUri) {
                        if (scanOptions.doUpload) {
                            _this.getFormData(imageUri).then(function (res) {
                                return resolve(res);
                            }).catch(function (err) { return reject(err); });
                        }
                        else {
                            resolve(imageUri);
                        }
                    }, function (error) {
                        return reject(error);
                    });
                }
                else {
                    reject('sourceType not found');
                }
            }, false);
        });
    };
    //Barcode
    NFileIOService.prototype.getBarcode = function (barcodeOptions) {
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                cordova.plugins.barcodeScanner.scan(function (result) {
                    if (result.cancelled) {
                        return reject(result);
                    }
                    else {
                        return resolve(result);
                    }
                }, function (error) {
                    return reject(error);
                }, barcodeOptions);
            }, false);
        });
    };
    //Video
    NFileIOService.prototype.getVideo = function (videoOptions) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                navigator.device.capture.captureVideo(function (mediaFiles) {
                    var imageUri = mediaFiles[0].fullPath;
                    _this.getFormData(imageUri).then(function (res) {
                        return resolve(res);
                    }).catch(function (err) { return reject(err); });
                }, function (error) {
                    return reject(error);
                }, {});
            }, false);
        });
    };
    //tts
    NFileIOService.prototype.getTts = function (ttsOptions) {
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                if (ttsOptions.hasOwnProperty('text')) {
                    TTS.speak(ttsOptions).then(function () {
                        return resolve('success');
                    }, function (reason) {
                        return reject(reason);
                    });
                }
                else {
                    reject('text not found');
                }
            }, false);
        });
    };
    //shake
    NFileIOService.prototype.getShake = function (shakeOptions) {
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                if (shakeOptions.hasOwnProperty('start') && shakeOptions.hasOwnProperty('sensitivity')) {
                    if (shakeOptions.start) {
                        shake.startWatch(function () {
                            return resolve('success');
                        }, shakeOptions.sensitivity, function () {
                            return reject('error');
                        });
                    }
                    else {
                        shake.stopWatch();
                    }
                }
                else {
                    reject('start or sensitivity not found');
                }
            }, false);
        });
    };
    //ocr
    NFileIOService.prototype.getOcr = function (ocrOptions) {
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                if (ocrOptions.hasOwnProperty('uriOrBase') && ocrOptions.hasOwnProperty('returnType')) {
                    navigator.camera.getPicture(function (imageData) {
                        textocr.recText(ocrOptions.uriOrBase, ocrOptions.returnType, imageData, function (recognizedText) {
                            return resolve(recognizedText);
                        }, function (message) {
                            return reject(message);
                        });
                    }, function (message) {
                        return reject(message);
                    }, ocrOptions);
                }
                else {
                    reject('uriOrBase or returnType not found');
                }
            }, false);
        });
    };
    //fingerprint
    NFileIOService.prototype.getFingerprint = function (fingerprintOptions) {
        return new Promise(function (resolve, reject) {
            document.addEventListener('deviceready', function () {
                if (fingerprintOptions.hasOwnProperty('clientId') && fingerprintOptions.hasOwnProperty('clientSecret')) {
                    Fingerprint.isAvailable(function (result) {
                        Fingerprint.show(fingerprintOptions, function () {
                            return resolve('success');
                        }, function (err) {
                            return reject(err);
                        });
                    }, function (message) {
                        return reject(message);
                    });
                }
                else {
                    reject('clientId or clientSecret not found');
                }
            }, false);
        });
    };
    NFileIOService.prototype.upload = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var body = new FormData();
            if (options.formData) {
                body = options.formData;
            }
            else if (options.files) {
                body.append('file', options.files);
            }
            else {
                reject('No file selected!');
            }
            if (options.metadata) {
                body.append('metadata', JSON.stringify(options.metadata));
            }
            var headers = { 'Content-Type': 'no-content' };
            var url = _this.systemService.getFileIOUrl() + ("" + options.entityName);
            var temp_headers = { headers: _this.setHeaders(headers) };
            _this.http.post(url, body, temp_headers)
                .subscribe(function (res) { return resolve(res); }, function (err) { return reject(err); });
        });
    };
    NFileIOService.prototype.download = function (options) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (options.entityName && (options.metadata || options.fileId)) {
                _this.getFileInfo(options).subscribe(function (res) {
                    if (options.metadata) {
                        res = res[res.length - 1];
                    }
                    else {
                        res = res.result;
                    }
                    var fileInfo = {
                        contentType: '',
                        filename: ''
                    };
                    if (res && res['contentType'] && res['filename']) {
                        fileInfo['contentType'] = res['contentType'];
                        fileInfo['filename'] = res['filename'];
                        var fileIOURL = _this.systemService.getFileIOUrl();
                        if (options.metadata) {
                            fileIOURL += options.entityName + "?metadataFilter={\"metadata.key\": \"" + options.metadata.key + "\"}";
                        }
                        else {
                            fileIOURL += options.entityName + "/" + options.fileId;
                        }
                        var headers = {
                            'Accept': fileInfo.contentType
                        };
                        _this.http.get(fileIOURL, { headers: _this.setHeaders(headers), responseType: 'blob' }).subscribe(function (response) {
                            var blob = new Blob([response.body], { type: fileInfo.contentType });
                            _this.saveFile(blob, fileInfo.filename).then(function (resp) {
                            }).catch(function (err) { return reject(err); });
                        }, function (err) { return reject(err); });
                    }
                    else {
                        reject('fileInfo not exit');
                    }
                }, function (err) { return reject(err); });
            }
            else {
                return reject('download options not found');
            }
        });
    };
    NFileIOService.prototype.saveFile = function (data, filename) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if (_this.systemService.checkDevice() == 'mobile') {
                var storageLocation = _this.systemService.isAndroid() ? cordova.file.externalRootDirectory : cordova.file.documentsDirectory;
                _this.createDirectory(storageLocation, _this.appProperties.appName, filename, data)
                    .then(function (res) { return resolve(res); })
                    .catch(function (err) { return reject(err); });
            }
            else {
                _this.saveToBrowser(data, filename).then(function (res) { return resolve(res); });
            }
        });
    };
    NFileIOService.prototype.saveToBrowser = function (data, fileName) {
        return new Promise(function (resolve) {
            // Edge 20+
            var isEdge = !( /*@cc_on!@*/false || !!document['documentMode']) && !!window.StyleMedia;
            if (isEdge) {
                window.navigator.msSaveBlob(data, fileName);
            }
            else {
                var downloadURL = window.URL.createObjectURL(data);
                var anchor = document.createElement('a');
                document.body.appendChild(anchor);
                anchor.style.display = 'none';
                anchor.download = fileName;
                anchor.href = downloadURL;
                anchor.click();
                window.URL.revokeObjectURL(downloadURL);
                document.body.removeChild(anchor);
                anchor.remove();
            }
            return resolve('download complete');
        });
    };
    NFileIOService.prototype.createDirectory = function (rootDirectory, appName, fileName, data) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            window.resolveLocalFileSystemURL(rootDirectory, function (fileSystem) {
                fileSystem.getDirectory(appName, { create: true }, function (dirEntry) {
                    _this.checkFileExist(dirEntry.nativeURL, fileName, 0, function (newFileName) {
                        dirEntry.getFile(newFileName, { create: true }, function (targetFile) {
                            targetFile.createWriter(function (fileWriter) {
                                fileWriter.onwriteend = function () {
                                    return resolve(targetFile.toURL());
                                };
                                fileWriter.onerror = function (err) {
                                    return reject(err);
                                };
                                fileWriter.write(data);
                            });
                        });
                    });
                }, function (err) { return reject(err); });
            }, function (err) { return reject(err); });
        });
    };
    NFileIOService.prototype.setHeaders = function (headerJSON) {
        var headers = new HttpHeaders();
        for (var key in headerJSON) {
            if (key) {
                headers = headers.set(key, headerJSON[key]);
            }
        }
        return headers;
    };
    NFileIOService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [HttpClient])
    ], NFileIOService);
    return NFileIOService;
}());
export { NFileIOService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1maWxlSU8uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ldXRyaW5vcy1tb2R1bGUvIiwic291cmNlcyI6WyJzcmMvYXBwL25ldXRyaW5vcy1tb2R1bGUvbmV1dHJpbm9zLWZpbGUvc2VydmljZXMvbi1maWxlSU8uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELDhEQUE4RDtBQUM5RCxPQUFPLEVBQUUsY0FBYyxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFjeEQ7SUFJRSx3QkFBb0IsSUFBZ0I7UUFBcEMsaUJBR0M7UUFIbUIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQXNUNUIsbUJBQWMsR0FBRyxVQUFDLElBQVksRUFBRSxRQUFnQixFQUFFLENBQVMsRUFBRSxRQUFRO1lBQzNFLE9BQU8sTUFBTSxDQUFDLHlCQUF5QixDQUFDLElBQUksR0FBRyxRQUFRLEVBQUU7Z0JBQ3ZELElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQztnQkFDZixJQUFJLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7b0JBQ2xDLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQ3pHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUU7d0JBQ25CLENBQUMsR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDO3dCQUNoQixJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRTs0QkFD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Q0FDdEIsT0FBTyxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7Z0NBQ3JDLENBQUMsQ0FBQztnQ0FFRixVQUFVLENBQUMsT0FBTyxHQUFHLFVBQUMsR0FBRztvQ0FDdkIsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7Z0NBQ3JCLENBQUMsQ0FBQztnQ0FDRixVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDOzRCQUN6QixDQUFDLENBQUMsQ0FBQzt3QkFDTCxDQUFDLENBQUMsQ0FBQztvQkFDTCxDQUFDLENBQUMsQ0FBQztnQkFDTCxDQUFDLEVBQUUsVUFBQSxHQUFHLElBQUksT0FBQSxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQVgsQ0FBVyxDQUFDLENBQUM7WUFDekIsQ0FBQyxFQUFFLFVBQUEsR0FBRyxJQUFJLE9BQUEsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFYLENBQVcsQ0FBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQStCTyxtQ0FBVSxHQUFsQixVQUFtQixVQUFrQjtRQUNuQyxJQUFJLE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ2hDLEtBQUssSUFBTSxHQUFHLElBQUksVUFBVSxFQUFFO1lBQzVCLElBQUksR0FBRyxFQUFFO2dCQUNQLE9BQU8sR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM3QztTQUNGO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQS9WVSxjQUFjO1FBRDFCLFVBQVUsRUFBRTtpREFLZSxVQUFVO09BSnpCLGNBQWMsQ0FpVzFCO0lBQUQscUJBQUM7Q0FBQSxBQWpXRCxJQWlXQztTQWpXWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG4vLyBpbXBvcnQgeyBTeXN0ZW1TZXJ2aWNlIH0gZnJvbSAnYXBwL3NlcnZpY2Uvc3lzdGVtLnNlcnZpY2UnO1xuaW1wb3J0IHsgTlN5c3RlbVNlcnZpY2V9IGZyb20gJ25ldXRyaW5vcy1zZWVkLXNlcnZpY2VzJztcbi8vIGltcG9ydCB7IFJlcXVlc3RPcHRpb25zIH0gZnJvbSAnQGFuZ3VsYXIvaHR0cCc7XG5cblxuZGVjbGFyZSBjb25zdCB3aW5kb3c6IGFueTtcbmRlY2xhcmUgY29uc3QgY29yZG92YTogYW55O1xuZGVjbGFyZSBjb25zdCBuYXZpZ2F0b3I6IGFueTtcbmRlY2xhcmUgY29uc3Qgc2NhbjogYW55O1xuZGVjbGFyZSBjb25zdCB0ZXh0b2NyOiBhbnk7XG5kZWNsYXJlIGNvbnN0IFRUUzogYW55O1xuZGVjbGFyZSBjb25zdCBzaGFrZTogYW55O1xuZGVjbGFyZSBjb25zdCBGaW5nZXJwcmludDogYW55O1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTkZpbGVJT1NlcnZpY2Uge1xuICBzeXN0ZW1TZXJ2aWNlO1xuICBhcHBQcm9wZXJ0aWVzO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCkge1xuICAgIHRoaXMuc3lzdGVtU2VydmljZSA9IE5TeXN0ZW1TZXJ2aWNlLmdldEluc3RhbmNlKCk7XG4gICAgdGhpcy5hcHBQcm9wZXJ0aWVzID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldFZhbCgncHJvcGVydGllcycpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRGaWxlSW5mbyhvcHRpb25zKTogYW55IHtcbiAgICBsZXQgZGF0YU1vZGVsVVJMID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldERhdGFNb2RlbFVybCgpO1xuICAgIGlmIChvcHRpb25zLm1ldGFkYXRhKSB7XG4gICAgICBkYXRhTW9kZWxVUkwgKz0gYCR7dGhpcy5hcHBQcm9wZXJ0aWVzLmFwcE5hbWV9XyR7b3B0aW9ucy5lbnRpdHlOYW1lfS5maWxlcz9maWx0ZXI9e1wibWV0YWRhdGEua2V5XCI6IFwiJHtvcHRpb25zLm1ldGFkYXRhLmtleX1cIn1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhTW9kZWxVUkwgKz0gYCR7dGhpcy5hcHBQcm9wZXJ0aWVzLmFwcE5hbWV9XyR7b3B0aW9ucy5lbnRpdHlOYW1lfS5maWxlcy8ke29wdGlvbnMuZmlsZUlkfWA7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KGRhdGFNb2RlbFVSTCk7XG4gIH1cblxuICBwcml2YXRlIGdldEZvcm1EYXRhKGZpbGVVcmk6IHN0cmluZyk6IFByb21pc2U8Rm9ybURhdGE+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgd2luZG93LnJlc29sdmVMb2NhbEZpbGVTeXN0ZW1VUkwoZmlsZVVyaSwgKGZpbGVFbnRyeSkgPT4ge1xuICAgICAgICBmaWxlRW50cnkuZmlsZSgoZmlsZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSBldnQgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChldnQpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9IGV2dCA9PiB7XG4gICAgICAgICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtuZXcgVWludDhBcnJheSg8YW55PnJlYWRlci5yZXN1bHQpXSwgeyB0eXBlOiBmaWxlLnR5cGUgfSk7XG4gICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBibG9iLCBmaWxlLm5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoZm9ybURhdGEpO1xuICAgICAgICAgIH07XG4gICAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0sIChlcnJvcikgPT4ge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldFBpY3R1cmUoY2FtZXJhT3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VyZWFkeScsICgpID0+IHtcbiAgICAgICAgbmF2aWdhdG9yLmNhbWVyYS5nZXRQaWN0dXJlKChpbWFnZVVyaSkgPT4ge1xuICAgICAgICAgIHRoaXMuZ2V0Rm9ybURhdGEoaW1hZ2VVcmkpLnRoZW4ocmVzID0+IHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHJlcyk7XG4gICAgICAgICAgfSkuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0sIGNhbWVyYU9wdGlvbnMpO1xuICAgICAgfSwgZmFsc2UpO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHNjYW5QaWN0dXJlKHNjYW5PcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZXJlYWR5JywgKCkgPT4ge1xuICAgICAgICBpZihzY2FuT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnc291cmNlVHlwZScpICYmIHNjYW5PcHRpb25zLmhhc093blByb3BlcnR5KCdkb1VwbG9hZCcpKSB7XG4gICAgICAgICAgc2Nhbi5zY2FuRG9jKHNjYW5PcHRpb25zLnNvdXJjZVR5cGUsIChpbWFnZVVyaSkgPT4ge1xuICAgICAgICAgICAgaWYgKHNjYW5PcHRpb25zLmRvVXBsb2FkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRGb3JtRGF0YShpbWFnZVVyaSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzKTtcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZShpbWFnZVVyaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ3NvdXJjZVR5cGUgbm90IGZvdW5kJyk7XG4gICAgICAgIH1cbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuXG4vL0JhcmNvZGVcbiAgcHVibGljIGdldEJhcmNvZGUoYmFyY29kZU9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlcmVhZHknLCAoKSA9PiB7XG4gICAgICAgIGNvcmRvdmEucGx1Z2lucy5iYXJjb2RlU2Nhbm5lci5zY2FuKChyZXN1bHQpPT4ge1xuICAgICAgICAgIGlmKHJlc3VsdC5jYW5jZWxsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiByZWplY3QocmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sIChlcnJvcik9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0sIGJhcmNvZGVPcHRpb25zKTtcbiAgICAgIH0sIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuXG4vL1ZpZGVvXG4gIHB1YmxpYyBnZXRWaWRlbyh2aWRlb09wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignZGV2aWNlcmVhZHknLCAoKSA9PiB7XG4gICAgICAgIG5hdmlnYXRvci5kZXZpY2UuY2FwdHVyZS5jYXB0dXJlVmlkZW8oKG1lZGlhRmlsZXMpID0+IHtcbiAgICAgICAgICB2YXIgaW1hZ2VVcmkgPSBtZWRpYUZpbGVzWzBdLmZ1bGxQYXRoOyAgICAgICAgXG4gICAgICAgICAgdGhpcy5nZXRGb3JtRGF0YShpbWFnZVVyaSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzKTtcbiAgICAgICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xuICAgICAgICB9LCAoZXJyb3IpID0+IHtcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycm9yKTtcbiAgICAgICAgfSwge30pO1xuICAgICAgfSwgZmFsc2UpO1xuICAgIH0pO1xuICB9XG5cbi8vdHRzXG4gIHB1YmxpYyBnZXRUdHModHRzT3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VyZWFkeScsICgpID0+IHtcbiAgICAgICAgaWYodHRzT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpKSB7XG4gICAgICAgICAgVFRTLnNwZWFrKHR0c09wdGlvbnMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICB9LCAocmVhc29uKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gcmVqZWN0KHJlYXNvbik7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KCd0ZXh0IG5vdCBmb3VuZCcpO1xuICAgICAgICB9XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfSk7XG4gIH1cblxuLy9zaGFrZVxuICBwdWJsaWMgZ2V0U2hha2Uoc2hha2VPcHRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZXJlYWR5JywgKCkgPT4ge1xuICAgICAgICBpZihzaGFrZU9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ3N0YXJ0JykgJiYgc2hha2VPcHRpb25zLmhhc093blByb3BlcnR5KCdzZW5zaXRpdml0eScpKSB7XG4gICAgICAgICAgaWYoc2hha2VPcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgICAgICBzaGFrZS5zdGFydFdhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoJ3N1Y2Nlc3MnKTtcbiAgICAgICAgICAgIH0sIHNoYWtlT3B0aW9ucy5zZW5zaXRpdml0eSwgKCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KCdlcnJvcicpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNoYWtlLnN0b3BXYXRjaCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ3N0YXJ0IG9yIHNlbnNpdGl2aXR5IG5vdCBmb3VuZCcpO1xuICAgICAgICB9XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfSk7XG4gIH1cblxuLy9vY3JcbiAgcHVibGljIGdldE9jcihvY3JPcHRpb25zKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VyZWFkeScsICgpID0+IHtcbiAgICAgICAgICBpZihvY3JPcHRpb25zLmhhc093blByb3BlcnR5KCd1cmlPckJhc2UnKSAmJiBvY3JPcHRpb25zLmhhc093blByb3BlcnR5KCdyZXR1cm5UeXBlJykpIHtcbiAgICAgICAgICAgIG5hdmlnYXRvci5jYW1lcmEuZ2V0UGljdHVyZSgoaW1hZ2VEYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgdGV4dG9jci5yZWNUZXh0KG9jck9wdGlvbnMudXJpT3JCYXNlLCBvY3JPcHRpb25zLnJldHVyblR5cGUsIGltYWdlRGF0YSwgKHJlY29nbml6ZWRUZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVjb2duaXplZFRleHQpO1xuICAgICAgICAgICAgICB9LCAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QobWVzc2FnZSk7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChtZXNzYWdlKTtcbiAgICAgICAgICAgIH0sIG9jck9wdGlvbnMpOyBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCd1cmlPckJhc2Ugb3IgcmV0dXJuVHlwZSBub3QgZm91bmQnKTtcbiAgICAgICAgICB9XG4gXG4gICAgICAgIH0sIGZhbHNlKTtcbiAgICB9KTtcbiAgfVxuXG5cbi8vZmluZ2VycHJpbnRcbiAgcHVibGljIGdldEZpbmdlcnByaW50KGZpbmdlcnByaW50T3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdkZXZpY2VyZWFkeScsICgpID0+IHtcbiAgICAgICAgaWYoZmluZ2VycHJpbnRPcHRpb25zLmhhc093blByb3BlcnR5KCdjbGllbnRJZCcpICYmIGZpbmdlcnByaW50T3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnY2xpZW50U2VjcmV0JykpIHtcbiAgICAgICAgICBGaW5nZXJwcmludC5pc0F2YWlsYWJsZSgocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBGaW5nZXJwcmludC5zaG93KGZpbmdlcnByaW50T3B0aW9ucywgKCkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgnc3VjY2VzcycpO1xuICAgICAgICAgICAgfSwgKGVycikgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LCAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHJlamVjdChtZXNzYWdlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QoJ2NsaWVudElkIG9yIGNsaWVudFNlY3JldCBub3QgZm91bmQnKTtcbiAgICAgICAgfVxuICAgICAgfSwgZmFsc2UpO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIHVwbG9hZChvcHRpb25zKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IGJvZHk6IEZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICBpZiAob3B0aW9ucy5mb3JtRGF0YSkge1xuICAgICAgICBib2R5ID0gb3B0aW9ucy5mb3JtRGF0YTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5maWxlcykge1xuICAgICAgICBib2R5LmFwcGVuZCgnZmlsZScsIG9wdGlvbnMuZmlsZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KCdObyBmaWxlIHNlbGVjdGVkIScpO1xuICAgICAgfVxuICAgICAgaWYgKG9wdGlvbnMubWV0YWRhdGEpIHtcbiAgICAgICAgYm9keS5hcHBlbmQoJ21ldGFkYXRhJywgSlNPTi5zdHJpbmdpZnkob3B0aW9ucy5tZXRhZGF0YSkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBoZWFkZXJzID0geyAnQ29udGVudC1UeXBlJzogJ25vLWNvbnRlbnQnIH07XG4gICAgICBjb25zdCB1cmwgPSB0aGlzLnN5c3RlbVNlcnZpY2UuZ2V0RmlsZUlPVXJsKCkgKyBgJHtvcHRpb25zLmVudGl0eU5hbWV9YDtcbiAgICAgIGxldCB0ZW1wX2hlYWRlcnMgPSB7IGhlYWRlcnM6IHRoaXMuc2V0SGVhZGVycyhoZWFkZXJzKSB9XG4gICAgICB0aGlzLmh0dHAucG9zdCh1cmwsIGJvZHksIHRlbXBfaGVhZGVycylcbiAgICAgICAgLnN1YnNjcmliZShyZXMgPT4gcmVzb2x2ZShyZXMpXG4gICAgICAgICwgZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBkb3dubG9hZChvcHRpb25zOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBpZiAob3B0aW9ucy5lbnRpdHlOYW1lICYmIChvcHRpb25zLm1ldGFkYXRhIHx8IG9wdGlvbnMuZmlsZUlkKSkge1xuICAgICAgICB0aGlzLmdldEZpbGVJbmZvKG9wdGlvbnMpLnN1YnNjcmliZSgocmVzKSA9PiB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMubWV0YWRhdGEpIHtcbiAgICAgICAgICAgIHJlcyA9IHJlc1tyZXMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcyA9IHJlcy5yZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGZpbGVJbmZvID0ge1xuICAgICAgICAgICAgY29udGVudFR5cGU6ICcnLFxuICAgICAgICAgICAgZmlsZW5hbWU6ICcnXG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZiAocmVzICYmIHJlc1snY29udGVudFR5cGUnXSAmJiByZXNbJ2ZpbGVuYW1lJ10pIHtcbiAgICAgICAgICAgIGZpbGVJbmZvWydjb250ZW50VHlwZSddID0gcmVzWydjb250ZW50VHlwZSddO1xuICAgICAgICAgICAgZmlsZUluZm9bJ2ZpbGVuYW1lJ10gPSByZXNbJ2ZpbGVuYW1lJ107XG4gICAgICAgICAgICBsZXQgZmlsZUlPVVJMID0gdGhpcy5zeXN0ZW1TZXJ2aWNlLmdldEZpbGVJT1VybCgpO1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMubWV0YWRhdGEpIHtcbiAgICAgICAgICAgICAgZmlsZUlPVVJMICs9IGAke29wdGlvbnMuZW50aXR5TmFtZX0/bWV0YWRhdGFGaWx0ZXI9e1wibWV0YWRhdGEua2V5XCI6IFwiJHtvcHRpb25zLm1ldGFkYXRhLmtleX1cIn1gO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZmlsZUlPVVJMICs9IGAke29wdGlvbnMuZW50aXR5TmFtZX0vJHtvcHRpb25zLmZpbGVJZH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaGVhZGVycyA9IHtcbiAgICAgICAgICAgICAgJ0FjY2VwdCc6IGZpbGVJbmZvLmNvbnRlbnRUeXBlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5odHRwLmdldChmaWxlSU9VUkwsIHsgaGVhZGVyczogdGhpcy5zZXRIZWFkZXJzKGhlYWRlcnMpLCByZXNwb25zZVR5cGU6ICdibG9iJyB9KS5zdWJzY3JpYmUoKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtyZXNwb25zZS5ib2R5XSwgeyB0eXBlOiBmaWxlSW5mby5jb250ZW50VHlwZSB9KTtcbiAgICAgICAgICAgICAgdGhpcy5zYXZlRmlsZShibG9iLCBmaWxlSW5mby5maWxlbmFtZSkudGhlbigocmVzcCkgPT4ge1xuICAgICAgICAgICAgICB9KS5jYXRjaChlcnIgPT4gcmVqZWN0KGVycikpO1xuICAgICAgICAgICAgfSwgZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KCdmaWxlSW5mbyBub3QgZXhpdCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSwgZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZWplY3QoJ2Rvd25sb2FkIG9wdGlvbnMgbm90IGZvdW5kJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgc2F2ZUZpbGUoZGF0YTogQmxvYiwgZmlsZW5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGlmICh0aGlzLnN5c3RlbVNlcnZpY2UuY2hlY2tEZXZpY2UoKSA9PSAnbW9iaWxlJykge1xuICAgICAgICBjb25zdCBzdG9yYWdlTG9jYXRpb24gPSB0aGlzLnN5c3RlbVNlcnZpY2UuaXNBbmRyb2lkKCkgPyBjb3Jkb3ZhLmZpbGUuZXh0ZXJuYWxSb290RGlyZWN0b3J5IDogY29yZG92YS5maWxlLmRvY3VtZW50c0RpcmVjdG9yeTtcbiAgICAgICAgdGhpcy5jcmVhdGVEaXJlY3Rvcnkoc3RvcmFnZUxvY2F0aW9uLCB0aGlzLmFwcFByb3BlcnRpZXMuYXBwTmFtZSwgZmlsZW5hbWUsIGRhdGEpXG4gICAgICAgICAgLnRoZW4ocmVzID0+IHJlc29sdmUocmVzKSlcbiAgICAgICAgICAuY2F0Y2goZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2F2ZVRvQnJvd3NlcihkYXRhLCBmaWxlbmFtZSkudGhlbihyZXMgPT4gcmVzb2x2ZShyZXMpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc2F2ZVRvQnJvd3NlcihkYXRhOiBCbG9iLCBmaWxlTmFtZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAvLyBFZGdlIDIwK1xuICAgICAgY29uc3QgaXNFZGdlID0gISgvKkBjY19vbiFAKi9mYWxzZSB8fCAhIWRvY3VtZW50Wydkb2N1bWVudE1vZGUnXSkgJiYgISF3aW5kb3cuU3R5bGVNZWRpYTtcbiAgICAgIGlmIChpc0VkZ2UpIHtcbiAgICAgICAgd2luZG93Lm5hdmlnYXRvci5tc1NhdmVCbG9iKGRhdGEsIGZpbGVOYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGRvd25sb2FkVVJMID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoZGF0YSk7XG4gICAgICAgIGNvbnN0IGFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChhbmNob3IpO1xuICAgICAgICBhbmNob3Iuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgYW5jaG9yLmRvd25sb2FkID0gZmlsZU5hbWU7XG4gICAgICAgIGFuY2hvci5ocmVmID0gZG93bmxvYWRVUkw7XG4gICAgICAgIGFuY2hvci5jbGljaygpO1xuICAgICAgICB3aW5kb3cuVVJMLnJldm9rZU9iamVjdFVSTChkb3dubG9hZFVSTCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoYW5jaG9yKTtcbiAgICAgICAgYW5jaG9yLnJlbW92ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc29sdmUoJ2Rvd25sb2FkIGNvbXBsZXRlJyk7XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZURpcmVjdG9yeShyb290RGlyZWN0b3J5OiBhbnksIGFwcE5hbWU6IHN0cmluZywgZmlsZU5hbWU6IHN0cmluZywgZGF0YTogQmxvYikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICB3aW5kb3cucmVzb2x2ZUxvY2FsRmlsZVN5c3RlbVVSTChyb290RGlyZWN0b3J5LCAoZmlsZVN5c3RlbSkgPT4ge1xuICAgICAgICBmaWxlU3lzdGVtLmdldERpcmVjdG9yeShhcHBOYW1lLCB7IGNyZWF0ZTogdHJ1ZSB9LCAoZGlyRW50cnkpID0+IHtcbiAgICAgICAgICB0aGlzLmNoZWNrRmlsZUV4aXN0KGRpckVudHJ5Lm5hdGl2ZVVSTCwgZmlsZU5hbWUsIDAsIChuZXdGaWxlTmFtZSkgPT4ge1xuICAgICAgICAgICAgZGlyRW50cnkuZ2V0RmlsZShuZXdGaWxlTmFtZSwgeyBjcmVhdGU6IHRydWUgfSwgKHRhcmdldEZpbGUpID0+IHtcbiAgICAgICAgICAgICAgdGFyZ2V0RmlsZS5jcmVhdGVXcml0ZXIoKGZpbGVXcml0ZXIpID0+IHtcbiAgICAgICAgICAgICAgICBmaWxlV3JpdGVyLm9ud3JpdGVlbmQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh0YXJnZXRGaWxlLnRvVVJMKCkpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBmaWxlV3JpdGVyLm9uZXJyb3IgPSAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBmaWxlV3JpdGVyLndyaXRlKGRhdGEpO1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LCBlcnIgPT4gcmVqZWN0KGVycikpO1xuICAgICAgfSwgZXJyID0+IHJlamVjdChlcnIpKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgY2hlY2tGaWxlRXhpc3QgPSAocGF0aDogc3RyaW5nLCBmaWxlTmFtZTogc3RyaW5nLCBpOiBudW1iZXIsIGNhbGxiYWNrKSA9PiB7XG4gICAgcmV0dXJuIHdpbmRvdy5yZXNvbHZlTG9jYWxGaWxlU3lzdGVtVVJMKHBhdGggKyBmaWxlTmFtZSwgKCkgPT4ge1xuICAgICAgbGV0IGxlbmd0aCA9IDQ7XG4gICAgICBpZiAoZmlsZU5hbWUubGFzdEluZGV4T2YoJygnKSA+IC0xKSB7XG4gICAgICAgIGNvbnN0IGlzRXhpc3QgPSBwYXJzZUludChmaWxlTmFtZS5zbGljZSgoZmlsZU5hbWUubGFzdEluZGV4T2YoJygnKSArIDEpLCBmaWxlTmFtZS5sYXN0SW5kZXhPZignKScpKSwgMTApO1xuICAgICAgICBpZiAoIWlzTmFOKGlzRXhpc3QpKSB7XG4gICAgICAgICAgaSA9IGlzRXhpc3QgKyAxO1xuICAgICAgICAgIGlmIChpID4gMTAgJiYgaSA8IDEwMCkge1xuICAgICAgICAgICAgbGVuZ3RoICs9IDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChpID4gMTAwKSB7XG4gICAgICAgICAgICBsZW5ndGggKz0gMjtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmlsZU5hbWUgPSBmaWxlTmFtZS5zbGljZSgwLCAoZmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKSAtIGxlbmd0aCkpICsgJyAoJyArIGkgKyAnKScgKyBmaWxlTmFtZS5zbGljZShmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgZmlsZU5hbWUgPSBmaWxlTmFtZS5zbGljZSgwLCAoZmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKSkpICsgZmlsZU5hbWUuc2xpY2UoZmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKSk7XG4gICAgICAgICAgZmlsZU5hbWUgPSBmaWxlTmFtZS5zbGljZSgwLCAoZmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKSkpICsgJyAoJyArIGkgKyAnKScgKyBmaWxlTmFtZS5zbGljZShmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaSArPSAxO1xuICAgICAgICBmaWxlTmFtZSA9IGZpbGVOYW1lLnNsaWNlKDAsIChmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpKSkgKyBmaWxlTmFtZS5zbGljZShmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpKTtcbiAgICAgICAgZmlsZU5hbWUgPSBmaWxlTmFtZS5zbGljZSgwLCAoZmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKSkpICsgJyAoJyArIGkgKyAnKScgKyBmaWxlTmFtZS5zbGljZShmaWxlTmFtZS5sYXN0SW5kZXhPZignLicpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmNoZWNrRmlsZUV4aXN0KHBhdGgsIGZpbGVOYW1lLCBpLCBjYWxsYmFjayk7XG4gICAgfSwgKCkgPT4ge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKGZpbGVOYW1lKTtcbiAgICB9KTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0SGVhZGVycyhoZWFkZXJKU09OOiBPYmplY3QpOiBIdHRwSGVhZGVycyB7XG4gICAgbGV0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBoZWFkZXJKU09OKSB7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLnNldChrZXksIGhlYWRlckpTT05ba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoZWFkZXJzO1xuICB9XG5cbn1cbiJdfQ==