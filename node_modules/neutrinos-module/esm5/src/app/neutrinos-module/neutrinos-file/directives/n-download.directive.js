import * as tslib_1 from "tslib";
import { Directive, Input, Output, EventEmitter, HostListener } from '@angular/core';
// import { FileIOService } from '../services/filesystem.service';
import { NFileIOService } from '../services/n-fileIO.service';
import { NDirectiveOptions } from './directive.class';
var NDownloadDirective = /** @class */ (function () {
    function NDownloadDirective(fsv) {
        this.fsv = fsv;
        this.onsuccess = new EventEmitter();
        this.onerror = new EventEmitter();
    }
    NDownloadDirective.prototype.methodToHandleMouseClickAction = function () {
        var _this = this;
        this.downloadFile()
            .then(function (res) { return _this.onsuccess.emit(res); })
            .catch(function (err) { return _this.onerror.emit(err); });
    };
    NDownloadDirective.prototype.downloadFile = function () {
        return this.fsv.download(this.downloadOptions);
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", NDirectiveOptions)
    ], NDownloadDirective.prototype, "downloadOptions", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], NDownloadDirective.prototype, "onsuccess", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], NDownloadDirective.prototype, "onerror", void 0);
    tslib_1.__decorate([
        HostListener('click'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], NDownloadDirective.prototype, "methodToHandleMouseClickAction", null);
    NDownloadDirective = tslib_1.__decorate([
        Directive({ selector: '[n-download]' }),
        tslib_1.__metadata("design:paramtypes", [NFileIOService])
    ], NDownloadDirective);
    return NDownloadDirective;
}());
export { NDownloadDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibi1kb3dubG9hZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZXV0cmlub3MtbW9kdWxlLyIsInNvdXJjZXMiOlsic3JjL2FwcC9uZXV0cmlub3MtbW9kdWxlL25ldXRyaW5vcy1maWxlL2RpcmVjdGl2ZXMvbi1kb3dubG9hZC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXJGLGtFQUFrRTtBQUNsRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFJdEQ7SUFLRSw0QkFBb0IsR0FBbUI7UUFBbkIsUUFBRyxHQUFILEdBQUcsQ0FBZ0I7UUFIN0IsY0FBUyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2xELFlBQU8sR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztJQUVmLENBQUM7SUFFckIsMkRBQThCLEdBQTlCO1FBQXZCLGlCQUlDO1FBSEMsSUFBSSxDQUFDLFlBQVksRUFBRTthQUNoQixJQUFJLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxLQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBeEIsQ0FBd0IsQ0FBQzthQUNyQyxLQUFLLENBQUMsVUFBQSxHQUFHLElBQUksT0FBQSxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBdEIsQ0FBc0IsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCx5Q0FBWSxHQUFaO1FBQ0UsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQWRRO1FBQVIsS0FBSyxFQUFFOzBDQUFrQixpQkFBaUI7K0RBQUM7SUFDbEM7UUFBVCxNQUFNLEVBQUU7MENBQVksWUFBWTt5REFBMkI7SUFDbEQ7UUFBVCxNQUFNLEVBQUU7MENBQVUsWUFBWTt1REFBMkI7SUFJbkM7UUFBdEIsWUFBWSxDQUFDLE9BQU8sQ0FBQzs7Ozs0RUFJckI7SUFYVSxrQkFBa0I7UUFEOUIsU0FBUyxDQUFDLEVBQUUsUUFBUSxFQUFFLGNBQWMsRUFBRSxDQUFDO2lEQU1iLGNBQWM7T0FMNUIsa0JBQWtCLENBZ0I5QjtJQUFELHlCQUFDO0NBQUEsQUFoQkQsSUFnQkM7U0FoQlksa0JBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG4vLyBpbXBvcnQgeyBGaWxlSU9TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvZmlsZXN5c3RlbS5zZXJ2aWNlJztcbmltcG9ydCB7IE5GaWxlSU9TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbi1maWxlSU8uc2VydmljZSc7XG5pbXBvcnQgeyBORGlyZWN0aXZlT3B0aW9ucyB9IGZyb20gJy4vZGlyZWN0aXZlLmNsYXNzJztcblxuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbi1kb3dubG9hZF0nIH0pXG5leHBvcnQgY2xhc3MgTkRvd25sb2FkRGlyZWN0aXZlIHtcbiAgQElucHV0KCkgZG93bmxvYWRPcHRpb25zOiBORGlyZWN0aXZlT3B0aW9ucztcbiAgQE91dHB1dCgpIG9uc3VjY2VzczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBvbmVycm9yOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZzdjogTkZpbGVJT1NlcnZpY2UpIHsgfVxuXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJykgbWV0aG9kVG9IYW5kbGVNb3VzZUNsaWNrQWN0aW9uKCkge1xuICAgIHRoaXMuZG93bmxvYWRGaWxlKClcbiAgICAgIC50aGVuKHJlcyA9PiB0aGlzLm9uc3VjY2Vzcy5lbWl0KHJlcykpXG4gICAgICAuY2F0Y2goZXJyID0+IHRoaXMub25lcnJvci5lbWl0KGVycikpO1xuICB9XG5cbiAgZG93bmxvYWRGaWxlKCkge1xuICAgIHJldHVybiB0aGlzLmZzdi5kb3dubG9hZCh0aGlzLmRvd25sb2FkT3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==